
G2_Codeschloss.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000001d2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000255  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000127  00000000  00000000  000005b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000247  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d1  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019a  00000000  00000000  00000b75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000d0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 36       	cpi	r26, 0x62	; 98
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 84 00 	call	0x108	; 0x108 <main>
  8e:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_Init>:
// USART initialisieren
// Siehe Datenblatt, 24.6. USART Initialization (S. 230)
// ---------------------------------------------------------------------------
void USART_Init(uint16_t ubrr)
{
    UBRR0L = (uint8_t)(ubrr);
  96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UBRR0H = (uint8_t)(ubrr >> 8);       // Set baud rate
  9a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UCSR0B = _BV( RXEN0) + _BV( TXEN0);  // Enable receiver & transmitter
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    UCSR0C = _BV(UCSZ00) + _BV(UCSZ01);  // 8 data bits, 1 stop bit
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  aa:	08 95       	ret

000000ac <USART_Transmit>:
// Ein einzelnes Zeichen über die Schnittstelle senden
// Siehe Datenblatt, 24.7. Data Transmission (S. 231)
// ---------------------------------------------------------------------------
void USART_Transmit(uint8_t data)
{
    while(!(UCSR0A & _BV(UDRE0))) { }    // Wait for empty transmit buffer
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
  b2:	95 ff       	sbrs	r25, 5
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <USART_Transmit+0x4>
    UDR0 = data;                         // Put data into transmit buffer
  b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ba:	08 95       	ret

000000bc <USART_Receive>:
// Ein einzelnes Zeichen über die Schnittstelle empfangen
// Siehe Datenblatt, 24.8. Data Reception (S. 233)
// ---------------------------------------------------------------------------
uint8_t USART_Receive(void)
{
    while (!(UCSR0A & _BV(RXC0))) { }    // Wait for data to be received
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 23       	and	r24, r24
  c4:	ec f7       	brge	.-6      	; 0xc0 <USART_Receive+0x4>
    return UDR0;                         // Get and return received data
  c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  ca:	08 95       	ret

000000cc <USART_TransmitLine>:
// ---------------------------------------------------------------------------
// Eine komplette Textzeile über die Schnittstelle senden,
// es wird automatisch ein Zeilenumbruch mitgesendet.
// ---------------------------------------------------------------------------
void USART_TransmitLine(const char *text)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
    int i;
    for(i = 0; text[i]; ++i) USART_Transmit((uint8_t)text[i]);
  d2:	88 81       	ld	r24, Y
  d4:	88 23       	and	r24, r24
  d6:	31 f0       	breq	.+12     	; 0xe4 <USART_TransmitLine+0x18>
  d8:	21 96       	adiw	r28, 0x01	; 1
  da:	0e 94 56 00 	call	0xac	; 0xac <USART_Transmit>
  de:	89 91       	ld	r24, Y+
  e0:	81 11       	cpse	r24, r1
  e2:	fb cf       	rjmp	.-10     	; 0xda <USART_TransmitLine+0xe>
    USART_Transmit(13); USART_Transmit(10);  // Zeilenumbruch!
  e4:	8d e0       	ldi	r24, 0x0D	; 13
  e6:	0e 94 56 00 	call	0xac	; 0xac <USART_Transmit>
  ea:	8a e0       	ldi	r24, 0x0A	; 10
  ec:	0e 94 56 00 	call	0xac	; 0xac <USART_Transmit>
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <relais_schalten>:
// ---------------------------------------------------------------------------
// Relais ein- (1) oder ausschalten (0)
// ---------------------------------------------------------------------------
void relais_schalten(int ein_aus)
{
    if(ein_aus == 1) PORTB |=  _BV(RELAIS);
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	91 05       	cpc	r25, r1
  fa:	11 f4       	brne	.+4      	; 0x100 <relais_schalten+0xa>
  fc:	2a 9a       	sbi	0x05, 2	; 5
  fe:	08 95       	ret
    if(ein_aus == 0) PORTB &= ~_BV(RELAIS);
 100:	89 2b       	or	r24, r25
 102:	09 f4       	brne	.+2      	; 0x106 <relais_schalten+0x10>
 104:	2a 98       	cbi	0x05, 2	; 5
 106:	08 95       	ret

00000108 <main>:
// ---------------------------------------------------------------------------
// Hauptprogramm
// ---------------------------------------------------------------------------
int main(void)
{
    DDRB = _BV(RELAIS);         // Ausgang mit Relais aktivieren
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	84 b9       	out	0x04, r24	; 4
    uint8_t relais_on = 0;      // Relais ist zunächst ausgeschaltet
    uint8_t state = ZUSTAND_0;  // Startzustand

    USART_Init(MYUBRR);
 10c:	87 e6       	ldi	r24, 0x67	; 103
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Init>
    USART_TransmitLine("Elektronisches Codeschloss; bitte Code eingeben:");
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 66 00 	call	0xcc	; 0xcc <USART_TransmitLine>
    USART_TransmitLine("================================================");
 11c:	81 e3       	ldi	r24, 0x31	; 49
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 66 00 	call	0xcc	; 0xcc <USART_TransmitLine>
    USART_TransmitLine("");
 124:	80 e3       	ldi	r24, 0x30	; 48
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 66 00 	call	0xcc	; 0xcc <USART_TransmitLine>
// Hauptprogramm
// ---------------------------------------------------------------------------
int main(void)
{
    DDRB = _BV(RELAIS);         // Ausgang mit Relais aktivieren
    uint8_t relais_on = 0;      // Relais ist zunächst ausgeschaltet
 12c:	10 e0       	ldi	r17, 0x00	; 0
            if(ch == 'C') state = ZUSTAND_3;
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_3:
            state = ZUSTAND_0;
 12e:	e1 2c       	mov	r14, r1
            break;

        case ZUSTAND_2:
            state = ZUSTAND_0;
            if(ch == 'C') state = ZUSTAND_3;
            if(ch == 'A') state = ZUSTAND_1;
 130:	ff 24       	eor	r15, r15
 132:	f3 94       	inc	r15
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_2:
            state = ZUSTAND_0;
            if(ch == 'C') state = ZUSTAND_3;
 134:	0f 2e       	mov	r0, r31
 136:	f3 e0       	ldi	r31, 0x03	; 3
 138:	bf 2e       	mov	r11, r31
 13a:	f0 2d       	mov	r31, r0
            if(ch == 'A') state = ZUSTAND_1;
 13c:	0f 2d       	mov	r16, r15
            if(ch == 'B') state = ZUSTAND_2;
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_2:
            state = ZUSTAND_0;
 13e:	de 2d       	mov	r29, r14
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_3:
            state = ZUSTAND_0;
            if(ch == 'B') state = ZUSTAND_4;
 140:	68 94       	set
 142:	cc 24       	eor	r12, r12
 144:	c2 f8       	bld	r12, 2
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_1:
            state = ZUSTAND_0;
            if(ch == 'B') state = ZUSTAND_2;
 146:	68 94       	set
 148:	dd 24       	eor	r13, r13
 14a:	d1 f8       	bld	r13, 1
            if(ch == 'C') state = ZUSTAND_3;
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_3:
            state = ZUSTAND_0;
 14c:	ce 2d       	mov	r28, r14
 14e:	01 c0       	rjmp	.+2      	; 0x152 <main+0x4a>
 150:	cd 2f       	mov	r28, r29
    USART_TransmitLine("================================================");
    USART_TransmitLine("");

    while(1)
    {
        uint8_t ch = USART_Receive();
 152:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Receive>
        switch(state)
 156:	c2 30       	cpi	r28, 0x02	; 2
 158:	99 f0       	breq	.+38     	; 0x180 <main+0x78>
 15a:	28 f4       	brcc	.+10     	; 0x166 <main+0x5e>
 15c:	cc 23       	and	r28, r28
 15e:	41 f0       	breq	.+16     	; 0x170 <main+0x68>
 160:	c1 30       	cpi	r28, 0x01	; 1
 162:	59 f0       	breq	.+22     	; 0x17a <main+0x72>
 164:	17 c0       	rjmp	.+46     	; 0x194 <main+0x8c>
 166:	c3 30       	cpi	r28, 0x03	; 3
 168:	71 f0       	breq	.+28     	; 0x186 <main+0x7e>
 16a:	c4 30       	cpi	r28, 0x04	; 4
 16c:	79 f0       	breq	.+30     	; 0x18c <main+0x84>
 16e:	12 c0       	rjmp	.+36     	; 0x194 <main+0x8c>
        {
        case ZUSTAND_0:
            if(ch == 'A') state = ZUSTAND_1;
 170:	c0 2f       	mov	r28, r16
 172:	81 34       	cpi	r24, 0x41	; 65
 174:	71 f3       	breq	.-36     	; 0x152 <main+0x4a>
 176:	cd 2f       	mov	r28, r29
 178:	ec cf       	rjmp	.-40     	; 0x152 <main+0x4a>
            break;

        case ZUSTAND_1:
            state = ZUSTAND_0;
            if(ch == 'B') state = ZUSTAND_2;
 17a:	82 34       	cpi	r24, 0x42	; 66
 17c:	a1 f4       	brne	.+40     	; 0x1a6 <main+0x9e>
 17e:	21 c0       	rjmp	.+66     	; 0x1c2 <main+0xba>
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_2:
            state = ZUSTAND_0;
            if(ch == 'C') state = ZUSTAND_3;
 180:	83 34       	cpi	r24, 0x43	; 67
 182:	a9 f4       	brne	.+42     	; 0x1ae <main+0xa6>
 184:	20 c0       	rjmp	.+64     	; 0x1c6 <main+0xbe>
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_3:
            state = ZUSTAND_0;
            if(ch == 'B') state = ZUSTAND_4;
 186:	82 34       	cpi	r24, 0x42	; 66
 188:	b1 f4       	brne	.+44     	; 0x1b6 <main+0xae>
 18a:	1f c0       	rjmp	.+62     	; 0x1ca <main+0xc2>
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_4:
            state = ZUSTAND_0;
            if(ch == 'A') state = ZUSTAND_5;
 18c:	81 34       	cpi	r24, 0x41	; 65
 18e:	21 f0       	breq	.+8      	; 0x198 <main+0x90>
            if(ch == 'B') state = ZUSTAND_4;
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_4:
            state = ZUSTAND_0;
 190:	cd 2f       	mov	r28, r29
 192:	df cf       	rjmp	.-66     	; 0x152 <main+0x4a>
            if(ch == 'A') state = ZUSTAND_5;
        }

        // Relais umschalten, falls der korrekte Code eingegeben wurde...
        if(state == ZUSTAND_5)
 194:	c5 30       	cpi	r28, 0x05	; 5
 196:	e9 f6       	brne	.-70     	; 0x152 <main+0x4a>
        {
            relais_on = 1 - relais_on;
 198:	8f 2d       	mov	r24, r15
 19a:	81 1b       	sub	r24, r17
 19c:	18 2f       	mov	r17, r24
            relais_schalten(relais_on);
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 7b 00 	call	0xf6	; 0xf6 <relais_schalten>
 1a4:	d3 cf       	rjmp	.-90     	; 0x14c <main+0x44>
            break;

        case ZUSTAND_1:
            state = ZUSTAND_0;
            if(ch == 'B') state = ZUSTAND_2;
            if(ch == 'A') state = ZUSTAND_1;
 1a6:	81 34       	cpi	r24, 0x41	; 65
 1a8:	a1 f2       	breq	.-88     	; 0x152 <main+0x4a>
        case ZUSTAND_0:
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_1:
            state = ZUSTAND_0;
 1aa:	cd 2f       	mov	r28, r29
 1ac:	d2 cf       	rjmp	.-92     	; 0x152 <main+0x4a>
            break;

        case ZUSTAND_2:
            state = ZUSTAND_0;
            if(ch == 'C') state = ZUSTAND_3;
            if(ch == 'A') state = ZUSTAND_1;
 1ae:	81 34       	cpi	r24, 0x41	; 65
 1b0:	31 f0       	breq	.+12     	; 0x1be <main+0xb6>
            if(ch == 'B') state = ZUSTAND_2;
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_2:
            state = ZUSTAND_0;
 1b2:	cd 2f       	mov	r28, r29
 1b4:	ce cf       	rjmp	.-100    	; 0x152 <main+0x4a>
            break;

        case ZUSTAND_3:
            state = ZUSTAND_0;
            if(ch == 'B') state = ZUSTAND_4;
            if(ch == 'A') state = ZUSTAND_1;
 1b6:	81 34       	cpi	r24, 0x41	; 65
 1b8:	59 f6       	brne	.-106    	; 0x150 <main+0x48>
 1ba:	c0 2f       	mov	r28, r16
 1bc:	ca cf       	rjmp	.-108    	; 0x152 <main+0x4a>
            break;

        case ZUSTAND_2:
            state = ZUSTAND_0;
            if(ch == 'C') state = ZUSTAND_3;
            if(ch == 'A') state = ZUSTAND_1;
 1be:	c0 2f       	mov	r28, r16
 1c0:	c8 cf       	rjmp	.-112    	; 0x152 <main+0x4a>
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_1:
            state = ZUSTAND_0;
            if(ch == 'B') state = ZUSTAND_2;
 1c2:	cd 2d       	mov	r28, r13
 1c4:	c6 cf       	rjmp	.-116    	; 0x152 <main+0x4a>
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_2:
            state = ZUSTAND_0;
            if(ch == 'C') state = ZUSTAND_3;
 1c6:	cb 2d       	mov	r28, r11
 1c8:	c4 cf       	rjmp	.-120    	; 0x152 <main+0x4a>
            if(ch == 'A') state = ZUSTAND_1;
            break;

        case ZUSTAND_3:
            state = ZUSTAND_0;
            if(ch == 'B') state = ZUSTAND_4;
 1ca:	cc 2d       	mov	r28, r12
 1cc:	c2 cf       	rjmp	.-124    	; 0x152 <main+0x4a>

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
