
A3_Taster_ein_aus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000154  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e2  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000018a  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ab  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005c  00000000  00000000  0000075b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000007b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
    // Welchen Zustand sollen die LEDs beim nächsten Tastendruck annehmen?
    int led_on = 1;

    DDRB  = 0b00100000;  // LED an PB5
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
    DDRD  = 0b01000000;  // LED an PD6, Taster an PD2
  84:	80 e4       	ldi	r24, 0x40	; 64
  86:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0b00000100;  // Pullup-Widerstand an PD2 einschalten!
  88:	84 e0       	ldi	r24, 0x04	; 4
  8a:	8b b9       	out	0x0b, r24	; 11
#include <util/delay.h>

int main(void)
{
    // Welchen Zustand sollen die LEDs beim nächsten Tastendruck annehmen?
    int led_on = 1;
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 e0       	ldi	r25, 0x00	; 0
            led_on = 0;          // Beim nächsten Tastendruck: LEDs aus
        }
        else
        {
            PORTB = 0b00000000;
            PORTD = 0b00000100;  // Aufpassen: Pullup an PD2 muss bleiben!
  90:	44 e0       	ldi	r20, 0x04	; 4
            led_on = 1;          // Beim nächsten Tastendruck: LEDs ein
  92:	31 e0       	ldi	r19, 0x01	; 1
  94:	20 e0       	ldi	r18, 0x00	; 0
        _delay_ms(100);

        if(led_on == 1)
        {
            // Taster gedrückt --> Eingang PD2 ist null
            PORTB = 0b00100000;
  96:	e0 e2       	ldi	r30, 0x20	; 32
            PORTD = 0b01000100;  // Aufpassen: Pullup an PD2 muss bleiben!
  98:	74 e4       	ldi	r23, 0x44	; 68
            led_on = 0;          // Beim nächsten Tastendruck: LEDs aus
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	50 e0       	ldi	r21, 0x00	; 0
    PORTD = 0b00000100;  // Pullup-Widerstand an PD2 einschalten!

    while (1)
    {
        // Abwarten, solange Taster nicht gedrückt ist...
        while((PIND & 0b00000100) != 0) { }
  9e:	4a 99       	sbic	0x09, 2	; 9
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	af ef       	ldi	r26, 0xFF	; 255
  a4:	b1 ee       	ldi	r27, 0xE1	; 225
  a6:	f4 e0       	ldi	r31, 0x04	; 4
  a8:	a1 50       	subi	r26, 0x01	; 1
  aa:	b0 40       	sbci	r27, 0x00	; 0
  ac:	f0 40       	sbci	r31, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x28>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x32>
  b2:	00 00       	nop

        // Taster wurde gerade betätigt und könnte noch prellen...
        _delay_ms(100);

        if(led_on == 1)
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	29 f4       	brne	.+10     	; 0xc2 <main+0x42>
        {
            // Taster gedrückt --> Eingang PD2 ist null
            PORTB = 0b00100000;
  b8:	e5 b9       	out	0x05, r30	; 5
            PORTD = 0b01000100;  // Aufpassen: Pullup an PD2 muss bleiben!
  ba:	7b b9       	out	0x0b, r23	; 11
            led_on = 0;          // Beim nächsten Tastendruck: LEDs aus
  bc:	86 2f       	mov	r24, r22
  be:	95 2f       	mov	r25, r21
  c0:	04 c0       	rjmp	.+8      	; 0xca <main+0x4a>
        }
        else
        {
            PORTB = 0b00000000;
  c2:	15 b8       	out	0x05, r1	; 5
            PORTD = 0b00000100;  // Aufpassen: Pullup an PD2 muss bleiben!
  c4:	4b b9       	out	0x0b, r20	; 11
            led_on = 1;          // Beim nächsten Tastendruck: LEDs ein
  c6:	83 2f       	mov	r24, r19
  c8:	92 2f       	mov	r25, r18
        }

        // Abwarten, solange Taster gedrückt ist...
        while((PIND & 0b00000100) == 0) { }
  ca:	4a 9b       	sbis	0x09, 2	; 9
  cc:	fe cf       	rjmp	.-4      	; 0xca <main+0x4a>
  ce:	af ef       	ldi	r26, 0xFF	; 255
  d0:	b1 ee       	ldi	r27, 0xE1	; 225
  d2:	f4 e0       	ldi	r31, 0x04	; 4
  d4:	a1 50       	subi	r26, 0x01	; 1
  d6:	b0 40       	sbci	r27, 0x00	; 0
  d8:	f0 40       	sbci	r31, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x54>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x5e>
  de:	00 00       	nop
  e0:	de cf       	rjmp	.-68     	; 0x9e <main+0x1e>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
