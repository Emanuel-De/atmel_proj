
B3_Langsamer_Blinker_mit_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000238  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000128  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b4  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000157  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000193  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  0000085b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  88:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <led_on>:
#include <util/delay.h>
#include <avr/interrupt.h>

void led_on(void)
{
    PORTB = 0b00100000;
  90:	80 e2       	ldi	r24, 0x20	; 32
  92:	85 b9       	out	0x05, r24	; 5
    PORTD = 0b01000100;     // Aufpassen: Pullup an PD2 muss bleiben!
  94:	84 e4       	ldi	r24, 0x44	; 68
  96:	8b b9       	out	0x0b, r24	; 11
  98:	08 95       	ret

0000009a <led_off>:
}

void led_off(void)
{
    PORTB = 0b00000000;
  9a:	15 b8       	out	0x05, r1	; 5
    PORTD = 0b00000100;     // Aufpassen: Pullup an PD2 muss bleiben!
  9c:	84 e0       	ldi	r24, 0x04	; 4
  9e:	8b b9       	out	0x0b, r24	; 11
  a0:	08 95       	ret

000000a2 <init_timer>:
}

void init_timer(void)
{
    TCCR0A = 0b00000010;    // WGM01 setzen (siehe Tab. 19-9, S. 140)
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 0b00000011;    // CS00+CS01 setzen (Tab. 19-10, S. 142)
  a6:	93 e0       	ldi	r25, 0x03	; 3
  a8:	95 bd       	out	0x25, r25	; 37
    TIMSK0 = 0b00000010;    // OCIE0A setzen (siehe S. 143)
  aa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    OCR0A  = 249;           // Vergleichswert für Timer
  ae:	89 ef       	ldi	r24, 0xF9	; 249
  b0:	87 bd       	out	0x27, r24	; 39
    sei();                  // Interrupt-System einschalten
  b2:	78 94       	sei
  b4:	08 95       	ret

000000b6 <__vector_14>:

unsigned long millis = 0;   // Millisekunden seit Programmstart
int led = 0;                // Aktueller Zustand der LEDs

ISR(TIMER0_COMPA_vect)
{
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	3f 93       	push	r19
  c4:	4f 93       	push	r20
  c6:	5f 93       	push	r21
  c8:	6f 93       	push	r22
  ca:	7f 93       	push	r23
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	af 93       	push	r26
  d2:	bf 93       	push	r27
  d4:	ef 93       	push	r30
  d6:	ff 93       	push	r31
    millis++;               // Millisekunden zählen
  d8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <millis>
  dc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <millis+0x1>
  e0:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <millis+0x2>
  e4:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <millis+0x3>
  e8:	bc 01       	movw	r22, r24
  ea:	cd 01       	movw	r24, r26
  ec:	6f 5f       	subi	r22, 0xFF	; 255
  ee:	7f 4f       	sbci	r23, 0xFF	; 255
  f0:	8f 4f       	sbci	r24, 0xFF	; 255
  f2:	9f 4f       	sbci	r25, 0xFF	; 255
  f4:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <millis>
  f8:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <millis+0x1>
  fc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <millis+0x2>
 100:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <millis+0x3>
    if(millis % 1000 == 0)  // LEDs 1x pro Sekunde umschalten
 104:	28 ee       	ldi	r18, 0xE8	; 232
 106:	33 e0       	ldi	r19, 0x03	; 3
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	0e 94 be 00 	call	0x17c	; 0x17c <__udivmodsi4>
 110:	67 2b       	or	r22, r23
 112:	68 2b       	or	r22, r24
 114:	69 2b       	or	r22, r25
 116:	c1 f4       	brne	.+48     	; 0x148 <__vector_14+0x92>
    {
        switch(led)
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	19 f0       	breq	.+6      	; 0x12a <__vector_14+0x74>
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	51 f0       	breq	.+20     	; 0x13c <__vector_14+0x86>
 128:	0f c0       	rjmp	.+30     	; 0x148 <__vector_14+0x92>
        {
            case 0: led_on();  led = 1; break;
 12a:	0e 94 48 00 	call	0x90	; 0x90 <led_on>
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 13a:	06 c0       	rjmp	.+12     	; 0x148 <__vector_14+0x92>
            case 1: led_off(); led = 0; break;
 13c:	0e 94 4d 00 	call	0x9a	; 0x9a <led_off>
 140:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 144:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
        }
    }
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <main>:

int main(void)
{
    DDRB  = 0b00100000;     // LED an PB5
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	84 b9       	out	0x04, r24	; 4
    DDRD  = 0b01000000;     // LED an PD6, Taster an PD2
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0b00000100;     // Pullup an PD2 einschalten!
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	8b b9       	out	0x0b, r24	; 11

    init_timer();
 176:	0e 94 51 00 	call	0xa2	; 0xa2 <init_timer>
    while(1) { }            // Endlosschleife
 17a:	ff cf       	rjmp	.-2      	; 0x17a <main+0x10>

0000017c <__udivmodsi4>:
 17c:	a1 e2       	ldi	r26, 0x21	; 33
 17e:	1a 2e       	mov	r1, r26
 180:	aa 1b       	sub	r26, r26
 182:	bb 1b       	sub	r27, r27
 184:	fd 01       	movw	r30, r26
 186:	0d c0       	rjmp	.+26     	; 0x1a2 <__udivmodsi4_ep>

00000188 <__udivmodsi4_loop>:
 188:	aa 1f       	adc	r26, r26
 18a:	bb 1f       	adc	r27, r27
 18c:	ee 1f       	adc	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	a2 17       	cp	r26, r18
 192:	b3 07       	cpc	r27, r19
 194:	e4 07       	cpc	r30, r20
 196:	f5 07       	cpc	r31, r21
 198:	20 f0       	brcs	.+8      	; 0x1a2 <__udivmodsi4_ep>
 19a:	a2 1b       	sub	r26, r18
 19c:	b3 0b       	sbc	r27, r19
 19e:	e4 0b       	sbc	r30, r20
 1a0:	f5 0b       	sbc	r31, r21

000001a2 <__udivmodsi4_ep>:
 1a2:	66 1f       	adc	r22, r22
 1a4:	77 1f       	adc	r23, r23
 1a6:	88 1f       	adc	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	1a 94       	dec	r1
 1ac:	69 f7       	brne	.-38     	; 0x188 <__udivmodsi4_loop>
 1ae:	60 95       	com	r22
 1b0:	70 95       	com	r23
 1b2:	80 95       	com	r24
 1b4:	90 95       	com	r25
 1b6:	9b 01       	movw	r18, r22
 1b8:	ac 01       	movw	r20, r24
 1ba:	bd 01       	movw	r22, r26
 1bc:	cf 01       	movw	r24, r30
 1be:	08 95       	ret

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
