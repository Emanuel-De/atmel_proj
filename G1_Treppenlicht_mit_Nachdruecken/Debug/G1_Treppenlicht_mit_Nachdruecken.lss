
G1_Treppenlicht_mit_Nachdruecken.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000221  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000113  00000000  00000000  000005a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001d0  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e1  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000132  00000000  00000000  00000afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000c2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 93 00 	call	0x126	; 0x126 <main>
  88:	0c 94 29 01 	jmp	0x252	; 0x252 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:

// ---------------------------------------------------------------------------
// Timer-Interrupt, Frequenz = 1000 Hz
// ---------------------------------------------------------------------------
ISR(TIMER0_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
    _millis_intern++;
  a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  aa:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  ae:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	a1 1d       	adc	r26, r1
  b6:	b1 1d       	adc	r27, r1
  b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  c4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
}
  c8:	bf 91       	pop	r27
  ca:	af 91       	pop	r26
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <Millis>:
{
    uint32_t result = 0;

    // Aufpassen, dass wir während der folgenden Zuweisung
    // nicht von einem Interrupt unterbrochen werden...!!!
    cli(); result = _millis_intern; sei();
  da:	f8 94       	cli
  dc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
  e0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
  e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_edata+0x2>
  e8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_edata+0x3>
  ec:	78 94       	sei
    return result;
}
  ee:	08 95       	ret

000000f0 <init_timer>:
// ---------------------------------------------------------------------------
// Timer initialisieren: Interrupt-Frequenz = 1000 Hz
// ---------------------------------------------------------------------------
void init_timer(void)
{
    TCCR0A = _BV(WGM01);             // CTC-Modus (siehe Tab. 19-9, S. 140)
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	84 bd       	out	0x24, r24	; 36
    TCCR0B = _BV(CS01) + _BV(CS00);  // Prescaler = 64 (Tab. 19-10, S. 142)
  f4:	93 e0       	ldi	r25, 0x03	; 3
  f6:	95 bd       	out	0x25, r25	; 37
    OCR0A  = 249;                    // Vergleichswert für Timer
  f8:	99 ef       	ldi	r25, 0xF9	; 249
  fa:	97 bd       	out	0x27, r25	; 39

    TIMSK0 = _BV(OCIE0A);            // Compare Match Interrupt (siehe S. 143)
  fc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    sei();                           // Interruptsystem des Controllers ein
 100:	78 94       	sei
 102:	08 95       	ret

00000104 <taster_gedrueckt>:
// ---------------------------------------------------------------------------
// Wird der Taster gerade gedrückt?
// ---------------------------------------------------------------------------
int taster_gedrueckt(void)
{
    if(PIND & _BV(TASTER)) return 0;
 104:	89 b1       	in	r24, 0x09	; 9
 106:	86 95       	lsr	r24
 108:	86 95       	lsr	r24
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	89 27       	eor	r24, r25
    return 1;
}
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	08 95       	ret

00000114 <relais_schalten>:
// ---------------------------------------------------------------------------
// Relais ein- (1) oder ausschalten (0)
// ---------------------------------------------------------------------------
void relais_schalten(int ein_aus)
{
    if(ein_aus == 1) PORTB |=  _BV(RELAIS);
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	91 05       	cpc	r25, r1
 118:	11 f4       	brne	.+4      	; 0x11e <relais_schalten+0xa>
 11a:	2a 9a       	sbi	0x05, 2	; 5
 11c:	08 95       	ret
    if(ein_aus == 0) PORTB &= ~_BV(RELAIS);
 11e:	89 2b       	or	r24, r25
 120:	09 f4       	brne	.+2      	; 0x124 <relais_schalten+0x10>
 122:	2a 98       	cbi	0x05, 2	; 5
 124:	08 95       	ret

00000126 <main>:
int main(void)
{
    uint8_t zustand = ZUSTAND_AUS;  // Zunächst ist das Licht aus!
    uint32_t start_time = 0;

    DDRB  = _BV(RELAIS);  // Ausgang mit Relais
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	84 b9       	out	0x04, r24	; 4
    PORTD = _BV(TASTER);  // Pullup am Taster
 12a:	8b b9       	out	0x0b, r24	; 11
    init_timer();
 12c:	0e 94 78 00 	call	0xf0	; 0xf0 <init_timer>
// Hauptprogramm
// ---------------------------------------------------------------------------
int main(void)
{
    uint8_t zustand = ZUSTAND_AUS;  // Zunächst ist das Licht aus!
    uint32_t start_time = 0;
 130:	c1 2c       	mov	r12, r1
 132:	d1 2c       	mov	r13, r1
 134:	76 01       	movw	r14, r12
// ---------------------------------------------------------------------------
// Hauptprogramm
// ---------------------------------------------------------------------------
int main(void)
{
    uint8_t zustand = ZUSTAND_AUS;  // Zunächst ist das Licht aus!
 136:	c1 e0       	ldi	r28, 0x01	; 1

        case ZUSTAND_EIN:
            if(taster_gedrueckt())
                { start_time = Millis(); }
            else if(Millis() - start_time > DAUER_EIN)
                { start_time = Millis(); zustand = ZUSTAND_BLINKT; }
 138:	03 e0       	ldi	r16, 0x03	; 3
            if(taster_gedrueckt())
                { start_time = Millis(); relais_schalten(1); zustand = ZUSTAND_EIN; }
            else if(Millis() - start_time > DAUER_BLINKT)
                { relais_schalten(0); zustand = ZUSTAND_AUS; }
            else
                { relais_schalten((Millis() - start_time) / 250 % 2); }  // Blinken...
 13a:	0f 2e       	mov	r0, r31
 13c:	fa ef       	ldi	r31, 0xFA	; 250
 13e:	8f 2e       	mov	r8, r31
 140:	91 2c       	mov	r9, r1
 142:	a1 2c       	mov	r10, r1
 144:	b1 2c       	mov	r11, r1
 146:	f0 2d       	mov	r31, r0

        case ZUSTAND_BLINKT:
            if(taster_gedrueckt())
                { start_time = Millis(); relais_schalten(1); zustand = ZUSTAND_EIN; }
            else if(Millis() - start_time > DAUER_BLINKT)
                { relais_schalten(0); zustand = ZUSTAND_AUS; }
 148:	11 e0       	ldi	r17, 0x01	; 1
                { start_time = Millis(); zustand = ZUSTAND_BLINKT; }
            break;

        case ZUSTAND_BLINKT:
            if(taster_gedrueckt())
                { start_time = Millis(); relais_schalten(1); zustand = ZUSTAND_EIN; }
 14a:	d2 e0       	ldi	r29, 0x02	; 2
    PORTD = _BV(TASTER);  // Pullup am Taster
    init_timer();

    while(1)
    {
        switch(zustand)
 14c:	c2 30       	cpi	r28, 0x02	; 2
 14e:	91 f0       	breq	.+36     	; 0x174 <main+0x4e>
 150:	c3 30       	cpi	r28, 0x03	; 3
 152:	61 f1       	breq	.+88     	; 0x1ac <main+0x86>
 154:	c1 30       	cpi	r28, 0x01	; 1
 156:	d1 f7       	brne	.-12     	; 0x14c <main+0x26>
        {
        case ZUSTAND_AUS:
            if(taster_gedrueckt())
 158:	0e 94 82 00 	call	0x104	; 0x104 <taster_gedrueckt>
 15c:	89 2b       	or	r24, r25
 15e:	b1 f3       	breq	.-20     	; 0x14c <main+0x26>
                { start_time = Millis(); relais_schalten(1); zustand = ZUSTAND_EIN; }
 160:	0e 94 6d 00 	call	0xda	; 0xda <Millis>
 164:	6b 01       	movw	r12, r22
 166:	7c 01       	movw	r14, r24
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 8a 00 	call	0x114	; 0x114 <relais_schalten>
 170:	cd 2f       	mov	r28, r29
 172:	ec cf       	rjmp	.-40     	; 0x14c <main+0x26>
            break;

        case ZUSTAND_EIN:
            if(taster_gedrueckt())
 174:	0e 94 82 00 	call	0x104	; 0x104 <taster_gedrueckt>
 178:	89 2b       	or	r24, r25
 17a:	29 f0       	breq	.+10     	; 0x186 <main+0x60>
                { start_time = Millis(); }
 17c:	0e 94 6d 00 	call	0xda	; 0xda <Millis>
 180:	6b 01       	movw	r12, r22
 182:	7c 01       	movw	r14, r24
 184:	e3 cf       	rjmp	.-58     	; 0x14c <main+0x26>
            else if(Millis() - start_time > DAUER_EIN)
 186:	0e 94 6d 00 	call	0xda	; 0xda <Millis>
 18a:	dc 01       	movw	r26, r24
 18c:	cb 01       	movw	r24, r22
 18e:	8c 19       	sub	r24, r12
 190:	9d 09       	sbc	r25, r13
 192:	ae 09       	sbc	r26, r14
 194:	bf 09       	sbc	r27, r15
 196:	89 39       	cpi	r24, 0x99	; 153
 198:	9a 43       	sbci	r25, 0x3A	; 58
 19a:	a1 05       	cpc	r26, r1
 19c:	b1 05       	cpc	r27, r1
 19e:	b0 f2       	brcs	.-84     	; 0x14c <main+0x26>
                { start_time = Millis(); zustand = ZUSTAND_BLINKT; }
 1a0:	0e 94 6d 00 	call	0xda	; 0xda <Millis>
 1a4:	6b 01       	movw	r12, r22
 1a6:	7c 01       	movw	r14, r24
 1a8:	c0 2f       	mov	r28, r16
 1aa:	d0 cf       	rjmp	.-96     	; 0x14c <main+0x26>
            break;

        case ZUSTAND_BLINKT:
            if(taster_gedrueckt())
 1ac:	0e 94 82 00 	call	0x104	; 0x104 <taster_gedrueckt>
 1b0:	89 2b       	or	r24, r25
 1b2:	51 f0       	breq	.+20     	; 0x1c8 <main+0xa2>
                { start_time = Millis(); relais_schalten(1); zustand = ZUSTAND_EIN; }
 1b4:	0e 94 6d 00 	call	0xda	; 0xda <Millis>
 1b8:	6b 01       	movw	r12, r22
 1ba:	7c 01       	movw	r14, r24
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 8a 00 	call	0x114	; 0x114 <relais_schalten>
 1c4:	cd 2f       	mov	r28, r29
 1c6:	c2 cf       	rjmp	.-124    	; 0x14c <main+0x26>
            else if(Millis() - start_time > DAUER_BLINKT)
 1c8:	0e 94 6d 00 	call	0xda	; 0xda <Millis>
 1cc:	dc 01       	movw	r26, r24
 1ce:	cb 01       	movw	r24, r22
 1d0:	8c 19       	sub	r24, r12
 1d2:	9d 09       	sbc	r25, r13
 1d4:	ae 09       	sbc	r26, r14
 1d6:	bf 09       	sbc	r27, r15
 1d8:	89 38       	cpi	r24, 0x89	; 137
 1da:	93 41       	sbci	r25, 0x13	; 19
 1dc:	a1 05       	cpc	r26, r1
 1de:	b1 05       	cpc	r27, r1
 1e0:	30 f0       	brcs	.+12     	; 0x1ee <main+0xc8>
                { relais_schalten(0); zustand = ZUSTAND_AUS; }
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 8a 00 	call	0x114	; 0x114 <relais_schalten>
 1ea:	c1 2f       	mov	r28, r17
 1ec:	af cf       	rjmp	.-162    	; 0x14c <main+0x26>
            else
                { relais_schalten((Millis() - start_time) / 250 % 2); }  // Blinken...
 1ee:	0e 94 6d 00 	call	0xda	; 0xda <Millis>
 1f2:	6c 19       	sub	r22, r12
 1f4:	7d 09       	sbc	r23, r13
 1f6:	8e 09       	sbc	r24, r14
 1f8:	9f 09       	sbc	r25, r15
 1fa:	a5 01       	movw	r20, r10
 1fc:	94 01       	movw	r18, r8
 1fe:	0e 94 07 01 	call	0x20e	; 0x20e <__udivmodsi4>
 202:	c9 01       	movw	r24, r18
 204:	81 70       	andi	r24, 0x01	; 1
 206:	99 27       	eor	r25, r25
 208:	0e 94 8a 00 	call	0x114	; 0x114 <relais_schalten>
 20c:	9f cf       	rjmp	.-194    	; 0x14c <main+0x26>

0000020e <__udivmodsi4>:
 20e:	a1 e2       	ldi	r26, 0x21	; 33
 210:	1a 2e       	mov	r1, r26
 212:	aa 1b       	sub	r26, r26
 214:	bb 1b       	sub	r27, r27
 216:	fd 01       	movw	r30, r26
 218:	0d c0       	rjmp	.+26     	; 0x234 <__udivmodsi4_ep>

0000021a <__udivmodsi4_loop>:
 21a:	aa 1f       	adc	r26, r26
 21c:	bb 1f       	adc	r27, r27
 21e:	ee 1f       	adc	r30, r30
 220:	ff 1f       	adc	r31, r31
 222:	a2 17       	cp	r26, r18
 224:	b3 07       	cpc	r27, r19
 226:	e4 07       	cpc	r30, r20
 228:	f5 07       	cpc	r31, r21
 22a:	20 f0       	brcs	.+8      	; 0x234 <__udivmodsi4_ep>
 22c:	a2 1b       	sub	r26, r18
 22e:	b3 0b       	sbc	r27, r19
 230:	e4 0b       	sbc	r30, r20
 232:	f5 0b       	sbc	r31, r21

00000234 <__udivmodsi4_ep>:
 234:	66 1f       	adc	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	88 1f       	adc	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	1a 94       	dec	r1
 23e:	69 f7       	brne	.-38     	; 0x21a <__udivmodsi4_loop>
 240:	60 95       	com	r22
 242:	70 95       	com	r23
 244:	80 95       	com	r24
 246:	90 95       	com	r25
 248:	9b 01       	movw	r18, r22
 24a:	ac 01       	movw	r20, r24
 24c:	bd 01       	movw	r22, r26
 24e:	cf 01       	movw	r24, r30
 250:	08 95       	ret

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
