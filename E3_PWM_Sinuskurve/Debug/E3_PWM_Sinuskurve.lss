
E3_PWM_Sinuskurve.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000236  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000236  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000016c  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000fb  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000114  00000000  00000000  0000053f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b2  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000dc  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__ctors_end>
   4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
   8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
   c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  34:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  40:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_16>
  44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  48:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  4c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  54:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
  64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	80 84       	ldd	r8, Z+8	; 0x08
  6a:	89 8d       	ldd	r24, Y+25	; 0x19
  6c:	92 96       	adiw	r26, 0x22	; 34
  6e:	9a 9f       	mul	r25, r26
  70:	a3 a7       	std	Z+43, r26	; 0x2b
  72:	ab b0       	in	r10, 0x0b	; 11
  74:	b4 b8       	out	0x04, r11	; 4
  76:	bc c0       	rjmp	.+376    	; 0x1f0 <_etext+0x2e>
  78:	c3 c7       	rjmp	.+3974   	; 0x1000 <__stack+0x701>
  7a:	cb ce       	rjmp	.-618    	; 0xfffffe12 <__eeprom_end+0xff7efe12>
  7c:	d2 d5       	rcall	.+2980   	; 0xc22 <__stack+0x323>
  7e:	d8 db       	rcall	.-2128   	; 0xfffff830 <__eeprom_end+0xff7ef830>
  80:	de e1       	ldi	r29, 0x1E	; 30
  82:	e4 e7       	ldi	r30, 0x74	; 116
  84:	e9 ec       	ldi	r30, 0xC9	; 201
  86:	ee f0       	brts	.+58     	; 0xc2 <__trampolines_end+0x5a>
  88:	f2 f4       	brpl	.+60     	; 0xc6 <__trampolines_end+0x5e>
  8a:	f6 f7       	brtc	.-4      	; 0x88 <__trampolines_end+0x20>
  8c:	f9 fa       	.word	0xfaf9	; ????
  8e:	fb fc       	.word	0xfcfb	; ????
  90:	fd fe       	.word	0xfefd	; ????
  92:	fe ff       	.word	0xfffe	; ????
  94:	ff ff       	.word	0xffff	; ????
  96:	ff ff       	.word	0xffff	; ????
  98:	fe fe       	.word	0xfefe	; ????
  9a:	fd fc       	.word	0xfcfd	; ????
  9c:	fb fa       	.word	0xfafb	; ????
  9e:	f9 f7       	brne	.-2      	; 0x9e <__trampolines_end+0x36>
  a0:	f6 f4       	brtc	.+60     	; 0xde <__trampolines_end+0x76>
  a2:	f2 f0       	brmi	.+60     	; 0xe0 <__trampolines_end+0x78>
  a4:	ee ec       	ldi	r30, 0xCE	; 206
  a6:	e9 e7       	ldi	r30, 0x79	; 121
  a8:	e4 e1       	ldi	r30, 0x14	; 20
  aa:	de db       	rcall	.-2116   	; 0xfffff868 <__eeprom_end+0xff7ef868>
  ac:	d8 d5       	rcall	.+2992   	; 0xc5e <__stack+0x35f>
  ae:	d2 ce       	rjmp	.-604    	; 0xfffffe54 <__eeprom_end+0xff7efe54>
  b0:	cb c7       	rjmp	.+3990   	; 0x1048 <__stack+0x749>
  b2:	c3 c0       	rjmp	.+390    	; 0x23a <_etext+0x78>
  b4:	bc b8       	out	0x0c, r11	; 12
  b6:	b4 b0       	in	r11, 0x04	; 4
  b8:	ab a7       	std	Y+43, r26	; 0x2b
  ba:	a3 9f       	mul	r26, r19
  bc:	9a 96       	adiw	r26, 0x2a	; 42
  be:	92 8d       	ldd	r25, Z+26	; 0x1a
  c0:	89 84       	ldd	r8, Y+9	; 0x09
  c2:	80 7c       	andi	r24, 0xC0	; 192
  c4:	77 73       	andi	r23, 0x37	; 55
  c6:	6e 6a       	ori	r22, 0xAE	; 174
  c8:	66 61       	ori	r22, 0x16	; 22
  ca:	5d 59       	subi	r21, 0x9D	; 157
  cc:	55 50       	subi	r21, 0x05	; 5
  ce:	4c 48       	sbci	r20, 0x8C	; 140
  d0:	44 41       	sbci	r20, 0x14	; 20
  d2:	3d 39       	cpi	r19, 0x9D	; 157
  d4:	35 32       	cpi	r19, 0x25	; 37
  d6:	2e 2b       	or	r18, r30
  d8:	28 25       	eor	r18, r8
  da:	22 1f       	adc	r18, r18
  dc:	1c 19       	sub	r17, r12
  de:	17 14       	cp	r1, r7
  e0:	12 10       	cpse	r1, r2
  e2:	0e 0c       	add	r0, r14
  e4:	0a 09       	sbc	r16, r10
  e6:	07 06       	cpc	r0, r23
  e8:	05 04       	cpc	r0, r5
  ea:	03 02       	muls	r16, r19
  ec:	02 01       	movw	r0, r4
  ee:	01 01       	movw	r0, r2
  f0:	01 01       	movw	r0, r2
  f2:	02 02       	muls	r16, r18
  f4:	03 04       	cpc	r0, r3
  f6:	05 06       	cpc	r0, r21
  f8:	07 09       	sbc	r16, r7
  fa:	0a 0c       	add	r0, r10
  fc:	0e 10       	cpse	r0, r14
  fe:	12 14       	cp	r1, r2
 100:	17 19       	sub	r17, r7
 102:	1c 1f       	adc	r17, r28
 104:	22 25       	eor	r18, r2
 106:	28 2b       	or	r18, r24
 108:	2e 32       	cpi	r18, 0x2E	; 46
 10a:	35 39       	cpi	r19, 0x95	; 149
 10c:	3d 40       	sbci	r19, 0x0D	; 13
 10e:	44 48       	sbci	r20, 0x84	; 132
 110:	4c 50       	subi	r20, 0x0C	; 12
 112:	55 59       	subi	r21, 0x95	; 149
 114:	5d 61       	ori	r21, 0x1D	; 29
 116:	66 6a       	ori	r22, 0xA6	; 166
 118:	6e 73       	andi	r22, 0x3E	; 62
 11a:	77 7c       	andi	r23, 0xC7	; 199
	...

0000011e <__ctors_end>:
 11e:	11 24       	eor	r1, r1
 120:	1f be       	out	0x3f, r1	; 63
 122:	cf ef       	ldi	r28, 0xFF	; 255
 124:	d8 e0       	ldi	r29, 0x08	; 8
 126:	de bf       	out	0x3e, r29	; 62
 128:	cd bf       	out	0x3d, r28	; 61

0000012a <__do_clear_bss>:
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	a0 e0       	ldi	r26, 0x00	; 0
 12e:	b1 e0       	ldi	r27, 0x01	; 1
 130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
 132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
 134:	a2 30       	cpi	r26, 0x02	; 2
 136:	b2 07       	cpc	r27, r18
 138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
 13a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
 13e:	0c 94 df 00 	jmp	0x1be	; 0x1be <_exit>

00000142 <__bad_interrupt>:
 142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <__vector_16>:
// Timer-Overflow-Interrupt: Nächsten Sinuswert aus Tabelle
// lesen und den PWM-Tastgrad entsprechend einstellen.
// ---------------------------------------------------------------------------
uint16_t sin_index = 0;  // Aktuelle Position in der Sinustabelle
ISR(TIMER0_OVF_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
    uint8_t pwm = pgm_read_byte_near(sin_tab + sin_index);
 158:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 15c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 160:	e8 59       	subi	r30, 0x98	; 152
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	e4 91       	lpm	r30, Z
    if(pwm == 0)
 166:	e1 11       	cpse	r30, r1
 168:	07 c0       	rjmp	.+14     	; 0x178 <__vector_16+0x32>
    {
        sin_index = 0;  // Tabellenende? --> Zurück zum Anfang...
 16a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 16e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
        pwm = pgm_read_byte_near(sin_tab + sin_index);
 172:	e8 e6       	ldi	r30, 0x68	; 104
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	e4 91       	lpm	r30, Z
    }

    // PWM-Tastgrad einstellen, Tabellen-Index hochzählen...
    OCR0A = pwm;
 178:	e7 bd       	out	0x27, r30	; 39
    sin_index++;
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 17e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 188:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <init_pwm_and_interrupt>:
// PWM-Ausgabe und Timer-Overflow-Interrupt aktivieren;
// beides wird mit demselben Timer Timer/Counter0 realisiert.
// ---------------------------------------------------------------------------
void init_pwm_and_interrupt(void)
{
    DDRD = _BV(PD6);  // PWM-Ausgabe am Anschluss PD6/OC0A
 19e:	80 e4       	ldi	r24, 0x40	; 64
 1a0:	8a b9       	out	0x0a, r24	; 10
    TCCR0A = _BV(COM0A1) + _BV(WGM00) + _BV(WGM01);  // S. 139f., Tab. 19-5/-9
 1a2:	83 e8       	ldi	r24, 0x83	; 131
 1a4:	84 bd       	out	0x24, r24	; 36
    TCCR0B = _BV(CS02);  // clk/256-Prescaler, Datenblatt S. 142, Tab. 19-10
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	85 bd       	out	0x25, r24	; 37
    TIMSK0 |= _BV(TOIE0);  // Overflow-Interrupt aktivieren
 1aa:	ee e6       	ldi	r30, 0x6E	; 110
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	80 83       	st	Z, r24
    sei();
 1b4:	78 94       	sei
 1b6:	08 95       	ret

000001b8 <main>:
// ---------------------------------------------------------------------------
// Hauptprogramm
// ---------------------------------------------------------------------------
int main(void)
{
    init_pwm_and_interrupt();
 1b8:	0e 94 cf 00 	call	0x19e	; 0x19e <init_pwm_and_interrupt>
    while(1) { }  // Interrupt-Funktion erledigt den Rest...
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <main+0x4>

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
