
B1_Blinker_ohne_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001aa  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000101  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000018e  00000000  00000000  0000048f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c8  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <led_on>:
#include <avr/io.h>
#include <util/delay.h>

void led_on(void)
{
    PORTB = 0b00100000;
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	85 b9       	out	0x05, r24	; 5
    PORTD = 0b01000100;  // Aufpassen: Pullup an PD2 muss bleiben!
  84:	84 e4       	ldi	r24, 0x44	; 68
  86:	8b b9       	out	0x0b, r24	; 11
  88:	08 95       	ret

0000008a <led_off>:
}

void led_off(void)
{
    PORTB = 0b00000000;
  8a:	15 b8       	out	0x05, r1	; 5
    PORTD = 0b00000100;  // Aufpassen: Pullup an PD2 muss bleiben!
  8c:	84 e0       	ldi	r24, 0x04	; 4
  8e:	8b b9       	out	0x0b, r24	; 11
  90:	08 95       	ret

00000092 <taster_gedrueckt>:
}

int taster_gedrueckt(void)
{
    if((PIND & 0b00000100) == 0) return 1;
  92:	89 b1       	in	r24, 0x09	; 9
  94:	86 95       	lsr	r24
  96:	86 95       	lsr	r24
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	89 27       	eor	r24, r25
    return 0;
}
  9c:	81 70       	andi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	08 95       	ret

000000a2 <main>:

int main(void)
{
    DDRB  = 0b00100000;  // LED an PB5
  a2:	80 e2       	ldi	r24, 0x20	; 32
  a4:	84 b9       	out	0x04, r24	; 4
    DDRD  = 0b01000000;  // LED an PD6, Taster an PD2
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0b00000100;  // Pullup an PD2 einschalten!
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	8b b9       	out	0x0b, r24	; 11

    while (1)
    {
        if(taster_gedrueckt())
  ae:	0e 94 49 00 	call	0x92	; 0x92 <taster_gedrueckt>
  b2:	89 2b       	or	r24, r25
  b4:	e1 f3       	breq	.-8      	; 0xae <main+0xc>
        {
            led_on();  _delay_ms(100);
  b6:	0e 94 40 00 	call	0x80	; 0x80 <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	81 ee       	ldi	r24, 0xE1	; 225
  be:	94 e0       	ldi	r25, 0x04	; 4
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x1e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x28>
  ca:	00 00       	nop
            led_off(); _delay_ms(100);
  cc:	0e 94 45 00 	call	0x8a	; 0x8a <led_off>
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	81 ee       	ldi	r24, 0xE1	; 225
  d4:	94 e0       	ldi	r25, 0x04	; 4
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x34>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x3e>
  e0:	00 00       	nop
  e2:	e5 cf       	rjmp	.-54     	; 0xae <main+0xc>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
