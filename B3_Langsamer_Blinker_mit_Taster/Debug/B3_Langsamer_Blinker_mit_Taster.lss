
B3_Langsamer_Blinker_mit_Taster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000025a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000015a  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000dd  00000000  00000000  0000046e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000017f  00000000  00000000  0000054b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a5  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f1  00000000  00000000  0000092d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  88:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <taster_gedrueckt>:
#include <util/delay.h>
#include <avr/interrupt.h>

int taster_gedrueckt(void)
{
    if((PIND & 0b00000100) == 0) return 1;
  90:	89 b1       	in	r24, 0x09	; 9
  92:	86 95       	lsr	r24
  94:	86 95       	lsr	r24
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	89 27       	eor	r24, r25
    return 0;
}
  9a:	81 70       	andi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	08 95       	ret

000000a0 <led_on>:

void led_on(void)
{
    PORTB = 0b00100000;
  a0:	80 e2       	ldi	r24, 0x20	; 32
  a2:	85 b9       	out	0x05, r24	; 5
    PORTD = 0b01000100;     // Aufpassen: Pullup an PD2 muss bleiben!
  a4:	84 e4       	ldi	r24, 0x44	; 68
  a6:	8b b9       	out	0x0b, r24	; 11
  a8:	08 95       	ret

000000aa <led_off>:
}

void led_off(void)
{
    PORTB = 0b00000000;
  aa:	15 b8       	out	0x05, r1	; 5
    PORTD = 0b00000100;     // Aufpassen: Pullup an PD2 muss bleiben!
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	08 95       	ret

000000b2 <init_timer>:
}

void init_timer(void)
{
    TCCR0A = 0b00000010;    // WGM01 setzen (siehe Tab. 19-9, S. 140)
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 0b00000011;    // CS00+CS01 setzen (Tab. 19-10, S. 142)
  b6:	93 e0       	ldi	r25, 0x03	; 3
  b8:	95 bd       	out	0x25, r25	; 37
    TIMSK0 = 0b00000010;    // OCIE0A setzen (siehe S. 143)
  ba:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    OCR0A  = 249;           // Vergleichswert für Timer
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	87 bd       	out	0x27, r24	; 39
    sei();                  // Interrupt-System einschalten
  c2:	78 94       	sei
  c4:	08 95       	ret

000000c6 <__vector_14>:

unsigned long millis = 0;   // Millisekunden seit Programmstart
int led = 0;                // Aktueller Zustand der LEDs

ISR(TIMER0_COMPA_vect)
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
    // Wenn der Taster gedrückt wird: 10-fache LED-Frequenz!
    int div = 1000;
    if(taster_gedrueckt() == 1) div = 100;
  e8:	0e 94 48 00 	call	0x90	; 0x90 <taster_gedrueckt>
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	19 f4       	brne	.+6      	; 0xf6 <__vector_14+0x30>
  f0:	24 e6       	ldi	r18, 0x64	; 100
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <__vector_14+0x34>
int led = 0;                // Aktueller Zustand der LEDs

ISR(TIMER0_COMPA_vect)
{
    // Wenn der Taster gedrückt wird: 10-fache LED-Frequenz!
    int div = 1000;
  f6:	28 ee       	ldi	r18, 0xE8	; 232
  f8:	33 e0       	ldi	r19, 0x03	; 3
    if(taster_gedrueckt() == 1) div = 100;

    millis++;               // Millisekunden zählen
  fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <millis>
  fe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <millis+0x1>
 102:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <millis+0x2>
 106:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <millis+0x3>
 10a:	bc 01       	movw	r22, r24
 10c:	cd 01       	movw	r24, r26
 10e:	6f 5f       	subi	r22, 0xFF	; 255
 110:	7f 4f       	sbci	r23, 0xFF	; 255
 112:	8f 4f       	sbci	r24, 0xFF	; 255
 114:	9f 4f       	sbci	r25, 0xFF	; 255
 116:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <millis>
 11a:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <millis+0x1>
 11e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <millis+0x2>
 122:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <millis+0x3>
    if(millis % div == 0)   // LEDs 1x pro Sekunde umschalten
 126:	03 2e       	mov	r0, r19
 128:	00 0c       	add	r0, r0
 12a:	44 0b       	sbc	r20, r20
 12c:	55 0b       	sbc	r21, r21
 12e:	0e 94 cf 00 	call	0x19e	; 0x19e <__udivmodsi4>
 132:	67 2b       	or	r22, r23
 134:	68 2b       	or	r22, r24
 136:	69 2b       	or	r22, r25
 138:	c1 f4       	brne	.+48     	; 0x16a <__vector_14+0xa4>
    {
        switch(led)
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	19 f0       	breq	.+6      	; 0x14c <__vector_14+0x86>
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	51 f0       	breq	.+20     	; 0x15e <__vector_14+0x98>
 14a:	0f c0       	rjmp	.+30     	; 0x16a <__vector_14+0xa4>
        {
            case 0: led_on();  led = 1; break;
 14c:	0e 94 50 00 	call	0xa0	; 0xa0 <led_on>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 15c:	06 c0       	rjmp	.+12     	; 0x16a <__vector_14+0xa4>
            case 1: led_off(); led = 0; break;
 15e:	0e 94 55 00 	call	0xaa	; 0xaa <led_off>
 162:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 166:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
        }
    }
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <main>:

int main(void)
{
    DDRB  = 0b00100000;     // LED an PB5
 18c:	80 e2       	ldi	r24, 0x20	; 32
 18e:	84 b9       	out	0x04, r24	; 4
    DDRD  = 0b01000000;     // LED an PD6, Taster an PD2
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0b00000100;     // Pullup an PD2 einschalten!
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	8b b9       	out	0x0b, r24	; 11

    init_timer();
 198:	0e 94 59 00 	call	0xb2	; 0xb2 <init_timer>
    while(1) { }            // Endlosschleife
 19c:	ff cf       	rjmp	.-2      	; 0x19c <main+0x10>

0000019e <__udivmodsi4>:
 19e:	a1 e2       	ldi	r26, 0x21	; 33
 1a0:	1a 2e       	mov	r1, r26
 1a2:	aa 1b       	sub	r26, r26
 1a4:	bb 1b       	sub	r27, r27
 1a6:	fd 01       	movw	r30, r26
 1a8:	0d c0       	rjmp	.+26     	; 0x1c4 <__udivmodsi4_ep>

000001aa <__udivmodsi4_loop>:
 1aa:	aa 1f       	adc	r26, r26
 1ac:	bb 1f       	adc	r27, r27
 1ae:	ee 1f       	adc	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	a2 17       	cp	r26, r18
 1b4:	b3 07       	cpc	r27, r19
 1b6:	e4 07       	cpc	r30, r20
 1b8:	f5 07       	cpc	r31, r21
 1ba:	20 f0       	brcs	.+8      	; 0x1c4 <__udivmodsi4_ep>
 1bc:	a2 1b       	sub	r26, r18
 1be:	b3 0b       	sbc	r27, r19
 1c0:	e4 0b       	sbc	r30, r20
 1c2:	f5 0b       	sbc	r31, r21

000001c4 <__udivmodsi4_ep>:
 1c4:	66 1f       	adc	r22, r22
 1c6:	77 1f       	adc	r23, r23
 1c8:	88 1f       	adc	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	1a 94       	dec	r1
 1ce:	69 f7       	brne	.-38     	; 0x1aa <__udivmodsi4_loop>
 1d0:	60 95       	com	r22
 1d2:	70 95       	com	r23
 1d4:	80 95       	com	r24
 1d6:	90 95       	com	r25
 1d8:	9b 01       	movw	r18, r22
 1da:	ac 01       	movw	r20, r24
 1dc:	bd 01       	movw	r22, r26
 1de:	cf 01       	movw	r24, r30
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
