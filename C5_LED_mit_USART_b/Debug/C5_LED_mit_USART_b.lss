
C5_LED_mit_USART_b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00000142  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000142  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000021b  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000118  00000000  00000000  000004eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a3  00000000  00000000  00000603  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ad  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f2  00000000  00000000  000009c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000ab7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 36       	cpi	r26, 0x6A	; 106
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  8e:	0c 94 9f 00 	jmp	0x13e	; 0x13e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_Init>:

// USART initialisieren
// Siehe Datenblatt, 24.6. USART Initialization (S. 230)
void USART_Init(uint16_t ubrr)
{
    UBRR0L = (uint8_t)(ubrr);
  96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    UBRR0H = (uint8_t)(ubrr >> 8);       // Set baud rate
  9a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    UCSR0B = _BV( RXEN0) + _BV( TXEN0);  // Enable receiver & transmitter
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    UCSR0C = _BV(UCSZ00) + _BV(UCSZ01);  // 8 data bits, 1 stop bit
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  aa:	08 95       	ret

000000ac <USART_Transmit>:

// Ein einzelnes Zeichen über die Schnittstelle senden
// Siehe Datenblatt, 24.7. Data Transmission (S. 231)
void USART_Transmit(uint8_t data)
{
    while(!(UCSR0A & _BV(UDRE0))) { }    // Wait for empty transmit buffer
  ac:	e0 ec       	ldi	r30, 0xC0	; 192
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	90 81       	ld	r25, Z
  b2:	95 ff       	sbrs	r25, 5
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <USART_Transmit+0x4>
    UDR0 = data;                         // Put data into transmit buffer
  b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ba:	08 95       	ret

000000bc <USART_Receive>:

// Ein einzelnes Zeichen über die Schnittstelle empfangen
// Siehe Datenblatt, 24.8. Data Reception (S. 233)
uint8_t USART_Receive(void)
{
    while (!(UCSR0A & _BV(RXC0))) { }    // Wait for data to be received
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	88 23       	and	r24, r24
  c4:	ec f7       	brge	.-6      	; 0xc0 <USART_Receive+0x4>
    return UDR0;                         // Get and return received data
  c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  ca:	08 95       	ret

000000cc <USART_TransmitLine>:

// Komplette Textzeile inkl. Zeilenumbruch senden.
void USART_TransmitLine(const char *text)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
    uint16_t idx;
    for(idx = 0; text[idx] != 0; idx++)
  d2:	88 81       	ld	r24, Y
  d4:	88 23       	and	r24, r24
  d6:	31 f0       	breq	.+12     	; 0xe4 <USART_TransmitLine+0x18>
  d8:	21 96       	adiw	r28, 0x01	; 1
        USART_Transmit(text[idx]);
  da:	0e 94 56 00 	call	0xac	; 0xac <USART_Transmit>

// Komplette Textzeile inkl. Zeilenumbruch senden.
void USART_TransmitLine(const char *text)
{
    uint16_t idx;
    for(idx = 0; text[idx] != 0; idx++)
  de:	89 91       	ld	r24, Y+
  e0:	81 11       	cpse	r24, r1
  e2:	fb cf       	rjmp	.-10     	; 0xda <USART_TransmitLine+0xe>
        USART_Transmit(text[idx]);

    // Zeilenumbruch
    USART_Transmit(13); USART_Transmit(10);
  e4:	8d e0       	ldi	r24, 0x0D	; 13
  e6:	0e 94 56 00 	call	0xac	; 0xac <USART_Transmit>
  ea:	8a e0       	ldi	r24, 0x0A	; 10
  ec:	0e 94 56 00 	call	0xac	; 0xac <USART_Transmit>
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <main>:

// Hauptprogramm
int main(void)
{
    DDRB = _BV(LED1);  // Interne LED an PB5
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	84 b9       	out	0x04, r24	; 4
    DDRD = _BV(LED2);  // Externe LED an PD6
  fa:	80 e4       	ldi	r24, 0x40	; 64
  fc:	8a b9       	out	0x0a, r24	; 10
    USART_Init(MYUBRR);
  fe:	87 e6       	ldi	r24, 0x67	; 103
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Init>

    USART_TransmitLine("Leuchtdioden einschalten (1) und ausschalten (0)");
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	0e 94 66 00 	call	0xcc	; 0xcc <USART_TransmitLine>
    USART_TransmitLine("================================================");
 10e:	81 e3       	ldi	r24, 0x31	; 49
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 66 00 	call	0xcc	; 0xcc <USART_TransmitLine>
    while(1)
    {
        uint8_t ch = USART_Receive();
 116:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Receive>
        if(ch == '1')
 11a:	81 33       	cpi	r24, 0x31	; 49
 11c:	39 f4       	brne	.+14     	; 0x12c <main+0x36>
        {
            PORTB |= _BV(LED1);
 11e:	2d 9a       	sbi	0x05, 5	; 5
            PORTD |= _BV(LED2);
 120:	5e 9a       	sbi	0x0b, 6	; 11
            USART_TransmitLine("EIN");
 122:	82 e6       	ldi	r24, 0x62	; 98
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 66 00 	call	0xcc	; 0xcc <USART_TransmitLine>
 12a:	f5 cf       	rjmp	.-22     	; 0x116 <main+0x20>
        }
        if(ch == '0')
 12c:	80 33       	cpi	r24, 0x30	; 48
 12e:	99 f7       	brne	.-26     	; 0x116 <main+0x20>
        {
            PORTB &= ~_BV(LED1);
 130:	2d 98       	cbi	0x05, 5	; 5
            PORTD &= ~_BV(LED2);
 132:	5e 98       	cbi	0x0b, 6	; 11
            USART_TransmitLine("AUS");
 134:	86 e6       	ldi	r24, 0x66	; 102
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 66 00 	call	0xcc	; 0xcc <USART_TransmitLine>
 13c:	ec cf       	rjmp	.-40     	; 0x116 <main+0x20>

0000013e <_exit>:
 13e:	f8 94       	cli

00000140 <__stop_program>:
 140:	ff cf       	rjmp	.-2      	; 0x140 <__stop_program>
