
D3_Voltmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000304  00000398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000304  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010a  0080010a  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002d4  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000190  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027f  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00000b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000209  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032c  00000000  00000000  00000e91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000011bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  9e:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_timer>:
// ---------------------------------------------------------------------------
uint8_t USART_Receive(void)
{
    while (!(UCSR0A & _BV(RXC0))) { }    // Wait for data to be received
    return UDR0;                         // Get and return received data
}
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	84 bd       	out	0x24, r24	; 36
  aa:	93 e0       	ldi	r25, 0x03	; 3
  ac:	95 bd       	out	0x25, r25	; 37
  ae:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  b2:	89 ef       	ldi	r24, 0xF9	; 249
  b4:	87 bd       	out	0x27, r24	; 39
  b6:	78 94       	sei
  b8:	08 95       	ret

000000ba <__vector_14>:
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
  dc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <millis>
  e0:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <millis+0x1>
  e4:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <millis+0x2>
  e8:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <millis+0x3>
  ec:	bc 01       	movw	r22, r24
  ee:	cd 01       	movw	r24, r26
  f0:	6f 5f       	subi	r22, 0xFF	; 255
  f2:	7f 4f       	sbci	r23, 0xFF	; 255
  f4:	8f 4f       	sbci	r24, 0xFF	; 255
  f6:	9f 4f       	sbci	r25, 0xFF	; 255
  f8:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <millis>
  fc:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <millis+0x1>
 100:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <millis+0x2>
 104:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <millis+0x3>
 108:	24 e6       	ldi	r18, 0x64	; 100
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	0e 94 4f 01 	call	0x29e	; 0x29e <__udivmodsi4>
 114:	67 2b       	or	r22, r23
 116:	68 2b       	or	r22, r24
 118:	69 2b       	or	r22, r25
 11a:	19 f4       	brne	.+6      	; 0x122 <__vector_14+0x68>
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	7f 91       	pop	r23
 130:	6f 91       	pop	r22
 132:	5f 91       	pop	r21
 134:	4f 91       	pop	r20
 136:	3f 91       	pop	r19
 138:	2f 91       	pop	r18
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <init_adc>:
 144:	80 e4       	ldi	r24, 0x40	; 64
 146:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 14a:	87 e8       	ldi	r24, 0x87	; 135
 14c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 150:	08 95       	ret

00000152 <read_adc0>:
 152:	ea e7       	ldi	r30, 0x7A	; 122
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	80 83       	st	Z, r24
 15c:	80 81       	ld	r24, Z
 15e:	86 fd       	sbrc	r24, 6
 160:	fd cf       	rjmp	.-6      	; 0x15c <read_adc0+0xa>
 162:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 166:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 16a:	08 95       	ret

0000016c <read_adc0_mean>:
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	c8 e0       	ldi	r28, 0x08	; 8
 174:	00 e0       	ldi	r16, 0x00	; 0
 176:	10 e0       	ldi	r17, 0x00	; 0
 178:	0e 94 a9 00 	call	0x152	; 0x152 <read_adc0>
 17c:	08 0f       	add	r16, r24
 17e:	19 1f       	adc	r17, r25
 180:	c1 50       	subi	r28, 0x01	; 1
 182:	d1 f7       	brne	.-12     	; 0x178 <read_adc0_mean+0xc>
 184:	c8 01       	movw	r24, r16
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	96 95       	lsr	r25
 18c:	87 95       	ror	r24
 18e:	96 95       	lsr	r25
 190:	87 95       	ror	r24
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	08 95       	ret

0000019a <USART_Init>:
 19a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 19e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1a2:	88 e1       	ldi	r24, 0x18	; 24
 1a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 1a8:	86 e0       	ldi	r24, 0x06	; 6
 1aa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 1ae:	08 95       	ret

000001b0 <USART_Transmit>:
 1b0:	e0 ec       	ldi	r30, 0xC0	; 192
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	90 81       	ld	r25, Z
 1b6:	95 ff       	sbrs	r25, 5
 1b8:	fd cf       	rjmp	.-6      	; 0x1b4 <USART_Transmit+0x4>
 1ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1be:	08 95       	ret

000001c0 <USART_TransmitLine>:

// ---------------------------------------------------------------------------
// Komplette Textzeile inkl. Zeilenumbruch senden.
// ---------------------------------------------------------------------------
void USART_TransmitLine(const char *text)
{
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	ec 01       	movw	r28, r24
    uint16_t idx;
    for(idx = 0; text[idx] != 0; idx++)
 1c6:	88 81       	ld	r24, Y
 1c8:	88 23       	and	r24, r24
 1ca:	31 f0       	breq	.+12     	; 0x1d8 <USART_TransmitLine+0x18>
 1cc:	21 96       	adiw	r28, 0x01	; 1
    USART_Transmit(text[idx]);
 1ce:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_Transmit>
// Komplette Textzeile inkl. Zeilenumbruch senden.
// ---------------------------------------------------------------------------
void USART_TransmitLine(const char *text)
{
    uint16_t idx;
    for(idx = 0; text[idx] != 0; idx++)
 1d2:	89 91       	ld	r24, Y+
 1d4:	81 11       	cpse	r24, r1
 1d6:	fb cf       	rjmp	.-10     	; 0x1ce <USART_TransmitLine+0xe>
    USART_Transmit(text[idx]);

    // Zeilenumbruch
    USART_Transmit(13); USART_Transmit(10);
 1d8:	8d e0       	ldi	r24, 0x0D	; 13
 1da:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_Transmit>
 1de:	8a e0       	ldi	r24, 0x0A	; 10
 1e0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <USART_Transmit>
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <main>:

// ---------------------------------------------------------------------------
// Hauptprogramm
// ---------------------------------------------------------------------------
int main(void)
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	2a 97       	sbiw	r28, 0x0a	; 10
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
    char msg[] = "0.00 Volt";
 1fe:	8a e0       	ldi	r24, 0x0A	; 10
 200:	e0 e0       	ldi	r30, 0x00	; 0
 202:	f1 e0       	ldi	r31, 0x01	; 1
 204:	de 01       	movw	r26, r28
 206:	11 96       	adiw	r26, 0x01	; 1
 208:	01 90       	ld	r0, Z+
 20a:	0d 92       	st	X+, r0
 20c:	8a 95       	dec	r24
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x1e>

    USART_Init(MYUBRR);
 210:	87 e6       	ldi	r24, 0x67	; 103
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_Init>
    init_adc();
 218:	0e 94 a2 00 	call	0x144	; 0x144 <init_adc>
    init_timer();
 21c:	0e 94 53 00 	call	0xa6	; 0xa6 <init_timer>
    {
        if(want_adc == 1)
        {
            uint32_t analog = read_adc0_mean();
            analog *=  500;  // Wert zwischen 0...1023 umrechnen in 
            analog /= 1023;  // 0...500 (also hundertstel Volt)...
 220:	0f 2e       	mov	r0, r31
 222:	88 24       	eor	r8, r8
 224:	8a 94       	dec	r8
 226:	f3 e0       	ldi	r31, 0x03	; 3
 228:	9f 2e       	mov	r9, r31
 22a:	a1 2c       	mov	r10, r1
 22c:	b1 2c       	mov	r11, r1
 22e:	f0 2d       	mov	r31, r0

            msg[3] = '0' + analog % 10; analog /= 10;
 230:	0f 2e       	mov	r0, r31
 232:	fa e0       	ldi	r31, 0x0A	; 10
 234:	cf 2e       	mov	r12, r31
 236:	d1 2c       	mov	r13, r1
 238:	e1 2c       	mov	r14, r1
 23a:	f1 2c       	mov	r15, r1
 23c:	f0 2d       	mov	r31, r0
    init_adc();
    init_timer();

    while(1)
    {
        if(want_adc == 1)
 23e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x54>
        {
            uint32_t analog = read_adc0_mean();
 246:	0e 94 b6 00 	call	0x16c	; 0x16c <read_adc0_mean>
            analog *=  500;  // Wert zwischen 0...1023 umrechnen in 
 24a:	9c 01       	movw	r18, r24
 24c:	a4 ef       	ldi	r26, 0xF4	; 244
 24e:	b1 e0       	ldi	r27, 0x01	; 1
 250:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__umulhisi3>
            analog /= 1023;  // 0...500 (also hundertstel Volt)...
 254:	a5 01       	movw	r20, r10
 256:	94 01       	movw	r18, r8
 258:	0e 94 4f 01 	call	0x29e	; 0x29e <__udivmodsi4>

            msg[3] = '0' + analog % 10; analog /= 10;
 25c:	ca 01       	movw	r24, r20
 25e:	b9 01       	movw	r22, r18
 260:	a7 01       	movw	r20, r14
 262:	96 01       	movw	r18, r12
 264:	0e 94 4f 01 	call	0x29e	; 0x29e <__udivmodsi4>
 268:	80 e3       	ldi	r24, 0x30	; 48
 26a:	86 0f       	add	r24, r22
 26c:	8c 83       	std	Y+4, r24	; 0x04
            msg[2] = '0' + analog % 10; analog /= 10;
 26e:	ca 01       	movw	r24, r20
 270:	b9 01       	movw	r22, r18
 272:	a7 01       	movw	r20, r14
 274:	96 01       	movw	r18, r12
 276:	0e 94 4f 01 	call	0x29e	; 0x29e <__udivmodsi4>
 27a:	80 e3       	ldi	r24, 0x30	; 48
 27c:	86 0f       	add	r24, r22
 27e:	8b 83       	std	Y+3, r24	; 0x03
            msg[0] = '0' + analog % 10;
 280:	ca 01       	movw	r24, r20
 282:	b9 01       	movw	r22, r18
 284:	a7 01       	movw	r20, r14
 286:	96 01       	movw	r18, r12
 288:	0e 94 4f 01 	call	0x29e	; 0x29e <__udivmodsi4>
 28c:	60 5d       	subi	r22, 0xD0	; 208
 28e:	69 83       	std	Y+1, r22	; 0x01

            USART_TransmitLine(msg);
 290:	ce 01       	movw	r24, r28
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <USART_TransmitLine>
            want_adc = 0;
 298:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 29c:	d0 cf       	rjmp	.-96     	; 0x23e <main+0x54>

0000029e <__udivmodsi4>:
 29e:	a1 e2       	ldi	r26, 0x21	; 33
 2a0:	1a 2e       	mov	r1, r26
 2a2:	aa 1b       	sub	r26, r26
 2a4:	bb 1b       	sub	r27, r27
 2a6:	fd 01       	movw	r30, r26
 2a8:	0d c0       	rjmp	.+26     	; 0x2c4 <__udivmodsi4_ep>

000002aa <__udivmodsi4_loop>:
 2aa:	aa 1f       	adc	r26, r26
 2ac:	bb 1f       	adc	r27, r27
 2ae:	ee 1f       	adc	r30, r30
 2b0:	ff 1f       	adc	r31, r31
 2b2:	a2 17       	cp	r26, r18
 2b4:	b3 07       	cpc	r27, r19
 2b6:	e4 07       	cpc	r30, r20
 2b8:	f5 07       	cpc	r31, r21
 2ba:	20 f0       	brcs	.+8      	; 0x2c4 <__udivmodsi4_ep>
 2bc:	a2 1b       	sub	r26, r18
 2be:	b3 0b       	sbc	r27, r19
 2c0:	e4 0b       	sbc	r30, r20
 2c2:	f5 0b       	sbc	r31, r21

000002c4 <__udivmodsi4_ep>:
 2c4:	66 1f       	adc	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	88 1f       	adc	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	1a 94       	dec	r1
 2ce:	69 f7       	brne	.-38     	; 0x2aa <__udivmodsi4_loop>
 2d0:	60 95       	com	r22
 2d2:	70 95       	com	r23
 2d4:	80 95       	com	r24
 2d6:	90 95       	com	r25
 2d8:	9b 01       	movw	r18, r22
 2da:	ac 01       	movw	r20, r24
 2dc:	bd 01       	movw	r22, r26
 2de:	cf 01       	movw	r24, r30
 2e0:	08 95       	ret

000002e2 <__umulhisi3>:
 2e2:	a2 9f       	mul	r26, r18
 2e4:	b0 01       	movw	r22, r0
 2e6:	b3 9f       	mul	r27, r19
 2e8:	c0 01       	movw	r24, r0
 2ea:	a3 9f       	mul	r26, r19
 2ec:	70 0d       	add	r23, r0
 2ee:	81 1d       	adc	r24, r1
 2f0:	11 24       	eor	r1, r1
 2f2:	91 1d       	adc	r25, r1
 2f4:	b2 9f       	mul	r27, r18
 2f6:	70 0d       	add	r23, r0
 2f8:	81 1d       	adc	r24, r1
 2fa:	11 24       	eor	r1, r1
 2fc:	91 1d       	adc	r25, r1
 2fe:	08 95       	ret

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
