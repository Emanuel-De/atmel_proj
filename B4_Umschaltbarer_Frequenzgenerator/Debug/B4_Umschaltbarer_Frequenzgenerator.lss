
B4_Umschaltbarer_Frequenzgenerator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000288  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000288  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  0000031e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000236  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000141  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000025f  00000000  00000000  0000074f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  000009b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000200  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b5  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000e21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  9e:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <frequenz_weiterschalten>:
#include <avr/interrupt.h>

int frequenz_weiterschalten(void)
{
    // Taster nicht gedrückt --> Rückgabe == 0.
    if((PIND & 0b00000100) != 0) return 0;
  a6:	4a 99       	sbic	0x09, 2	; 9
  a8:	17 c0       	rjmp	.+46     	; 0xd8 <frequenz_weiterschalten+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	81 ee       	ldi	r24, 0xE1	; 225
  ae:	94 e0       	ldi	r25, 0x04	; 4
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <frequenz_weiterschalten+0xa>
  b8:	00 c0       	rjmp	.+0      	; 0xba <frequenz_weiterschalten+0x14>
  ba:	00 00       	nop

    // Kurz warten, Taster kann prellen...
    _delay_ms(100);

    // Abwarten, bis Taster wieder losgelassen wird...
    while((PIND & 0b00000100) == 0) { }
  bc:	4a 9b       	sbis	0x09, 2	; 9
  be:	fe cf       	rjmp	.-4      	; 0xbc <frequenz_weiterschalten+0x16>
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	81 ee       	ldi	r24, 0xE1	; 225
  c4:	94 e0       	ldi	r25, 0x04	; 4
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <frequenz_weiterschalten+0x20>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <frequenz_weiterschalten+0x2a>
  d0:	00 00       	nop

    // Nochmals kurz warten, Taster kann wieder prellen...
    _delay_ms(100);

    // Frequenz soll verändert werden --> Rückgabe == 1.
    return 1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	08 95       	ret
#include <avr/interrupt.h>

int frequenz_weiterschalten(void)
{
    // Taster nicht gedrückt --> Rückgabe == 0.
    if((PIND & 0b00000100) != 0) return 0;
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
    // Nochmals kurz warten, Taster kann wieder prellen...
    _delay_ms(100);

    // Frequenz soll verändert werden --> Rückgabe == 1.
    return 1;
}
  dc:	08 95       	ret

000000de <led_on>:

void led_on(void)
{
    PORTB = 0b00100000;
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	85 b9       	out	0x05, r24	; 5
    PORTD = 0b01000100;     // Aufpassen: Pullup an PD2 muss bleiben!
  e2:	84 e4       	ldi	r24, 0x44	; 68
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	08 95       	ret

000000e8 <led_off>:
}

void led_off(void)
{
    PORTB = 0b00000000;
  e8:	15 b8       	out	0x05, r1	; 5
    PORTD = 0b00000100;     // Aufpassen: Pullup an PD2 muss bleiben!
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	8b b9       	out	0x0b, r24	; 11
  ee:	08 95       	ret

000000f0 <__vector_14>:
volatile char state = 1;    // Nummer der aktuellen Frequenz (1...4)
unsigned long millis = 0;   // Millisekunden seit Programmstart
int led = 0;                // Aktueller Zustand der LEDs

ISR(TIMER0_COMPA_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	3f 93       	push	r19
  fe:	4f 93       	push	r20
 100:	5f 93       	push	r21
 102:	6f 93       	push	r22
 104:	7f 93       	push	r23
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	af 93       	push	r26
 10c:	bf 93       	push	r27
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
    // Die aktuelle Frequenz (1...4) in der Variablen
    // "state" bestimmt den aktuellen Teiler...
    int div = 1000;
    switch(state)
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	61 f0       	breq	.+24     	; 0x132 <__vector_14+0x42>
 11a:	18 f4       	brcc	.+6      	; 0x122 <__vector_14+0x32>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	31 f0       	breq	.+12     	; 0x12c <__vector_14+0x3c>
 120:	11 c0       	rjmp	.+34     	; 0x144 <__vector_14+0x54>
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	49 f0       	breq	.+18     	; 0x138 <__vector_14+0x48>
 126:	84 30       	cpi	r24, 0x04	; 4
 128:	51 f0       	breq	.+20     	; 0x13e <__vector_14+0x4e>
 12a:	0c c0       	rjmp	.+24     	; 0x144 <__vector_14+0x54>
    {
    case 1: div = 500; break;
 12c:	24 ef       	ldi	r18, 0xF4	; 244
 12e:	31 e0       	ldi	r19, 0x01	; 1
 130:	0b c0       	rjmp	.+22     	; 0x148 <__vector_14+0x58>
    case 2: div = 100; break;
 132:	24 e6       	ldi	r18, 0x64	; 100
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	08 c0       	rjmp	.+16     	; 0x148 <__vector_14+0x58>
    case 3: div =  50; break;
 138:	22 e3       	ldi	r18, 0x32	; 50
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	05 c0       	rjmp	.+10     	; 0x148 <__vector_14+0x58>
    case 4: div =  10; break;
 13e:	2a e0       	ldi	r18, 0x0A	; 10
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <__vector_14+0x58>

ISR(TIMER0_COMPA_vect)
{
    // Die aktuelle Frequenz (1...4) in der Variablen
    // "state" bestimmt den aktuellen Teiler...
    int div = 1000;
 144:	28 ee       	ldi	r18, 0xE8	; 232
 146:	33 e0       	ldi	r19, 0x03	; 3
    case 2: div = 100; break;
    case 3: div =  50; break;
    case 4: div =  10; break;
    }

    millis++;               // Millisekunden zählen
 148:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <millis>
 14c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <millis+0x1>
 150:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <millis+0x2>
 154:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <millis+0x3>
 158:	bc 01       	movw	r22, r24
 15a:	cd 01       	movw	r24, r26
 15c:	6f 5f       	subi	r22, 0xFF	; 255
 15e:	7f 4f       	sbci	r23, 0xFF	; 255
 160:	8f 4f       	sbci	r24, 0xFF	; 255
 162:	9f 4f       	sbci	r25, 0xFF	; 255
 164:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <millis>
 168:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <millis+0x1>
 16c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <millis+0x2>
 170:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <millis+0x3>
    if(millis % div == 0)   // LEDs blinken lassen
 174:	03 2e       	mov	r0, r19
 176:	00 0c       	add	r0, r0
 178:	44 0b       	sbc	r20, r20
 17a:	55 0b       	sbc	r21, r21
 17c:	0e 94 20 01 	call	0x240	; 0x240 <__udivmodsi4>
 180:	67 2b       	or	r22, r23
 182:	68 2b       	or	r22, r24
 184:	69 2b       	or	r22, r25
 186:	c1 f4       	brne	.+48     	; 0x1b8 <__vector_14+0xc8>
    {
        switch(led)
 188:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 18c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 190:	00 97       	sbiw	r24, 0x00	; 0
 192:	19 f0       	breq	.+6      	; 0x19a <__vector_14+0xaa>
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	51 f0       	breq	.+20     	; 0x1ac <__vector_14+0xbc>
 198:	0f c0       	rjmp	.+30     	; 0x1b8 <__vector_14+0xc8>
        {
            case 0: led_on();  led = 1; break;
 19a:	0e 94 6f 00 	call	0xde	; 0xde <led_on>
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <__vector_14+0xc8>
            case 1: led_off(); led = 0; break;
 1ac:	0e 94 74 00 	call	0xe8	; 0xe8 <led_off>
 1b0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 1b4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
        }
    }
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <init_timer>:

void init_timer(void)
{
    TCCR0A = 0b00000010;    // WGM01 setzen (siehe Tab. 19-9, S. 140)
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	84 bd       	out	0x24, r24	; 36
    TCCR0B = 0b00000011;    // CS00+CS01 setzen (Tab. 19-10, S. 142)
 1de:	93 e0       	ldi	r25, 0x03	; 3
 1e0:	95 bd       	out	0x25, r25	; 37
    TIMSK0 = 0b00000010;    // OCIE0A setzen (siehe S. 143)
 1e2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    OCR0A  = 249;           // Vergleichswert für Timer
 1e6:	89 ef       	ldi	r24, 0xF9	; 249
 1e8:	87 bd       	out	0x27, r24	; 39
    sei();                  // Interrupt-System einschalten
 1ea:	78 94       	sei
 1ec:	08 95       	ret

000001ee <main>:
}

int main(void)
{
    DDRB  = 0b00100000;     // LED an PB5
 1ee:	80 e2       	ldi	r24, 0x20	; 32
 1f0:	84 b9       	out	0x04, r24	; 4
    DDRD  = 0b01000000;     // LED an PD6, Taster an PD2
 1f2:	80 e4       	ldi	r24, 0x40	; 64
 1f4:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0b00000100;     // Pullup an PD2 einschalten!
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	8b b9       	out	0x0b, r24	; 11
    init_timer();
 1fa:	0e 94 ed 00 	call	0x1da	; 0x1da <init_timer>
        if(frequenz_weiterschalten() == 1)
        {
            switch(state)
            {
                case 1: state = 2; break;
                case 2: state = 3; break;
 1fe:	03 e0       	ldi	r16, 0x03	; 3
                case 3: state = 4; break;
 200:	14 e0       	ldi	r17, 0x04	; 4
                case 4: state = 1; break;
 202:	d1 e0       	ldi	r29, 0x01	; 1
        // gesetzt. Der Timer-Interrupt erledigt den Rest...
        if(frequenz_weiterschalten() == 1)
        {
            switch(state)
            {
                case 1: state = 2; break;
 204:	c2 e0       	ldi	r28, 0x02	; 2
    while(1)                // Endlosschleife
    {
        // Wenn der Anwender die Frequenz verändern möchte,
        // wird die Variable "state" auf einen neuen Wert
        // gesetzt. Der Timer-Interrupt erledigt den Rest...
        if(frequenz_weiterschalten() == 1)
 206:	0e 94 53 00 	call	0xa6	; 0xa6 <frequenz_weiterschalten>
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x18>
        {
            switch(state)
 20e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	61 f0       	breq	.+24     	; 0x22e <main+0x40>
 216:	18 f4       	brcc	.+6      	; 0x21e <main+0x30>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	31 f0       	breq	.+12     	; 0x228 <main+0x3a>
 21c:	f4 cf       	rjmp	.-24     	; 0x206 <main+0x18>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	49 f0       	breq	.+18     	; 0x234 <main+0x46>
 222:	84 30       	cpi	r24, 0x04	; 4
 224:	51 f0       	breq	.+20     	; 0x23a <main+0x4c>
 226:	ef cf       	rjmp	.-34     	; 0x206 <main+0x18>
            {
                case 1: state = 2; break;
 228:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 22c:	ec cf       	rjmp	.-40     	; 0x206 <main+0x18>
                case 2: state = 3; break;
 22e:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__data_start>
 232:	e9 cf       	rjmp	.-46     	; 0x206 <main+0x18>
                case 3: state = 4; break;
 234:	10 93 00 01 	sts	0x0100, r17	; 0x800100 <__data_start>
 238:	e6 cf       	rjmp	.-52     	; 0x206 <main+0x18>
                case 4: state = 1; break;
 23a:	d0 93 00 01 	sts	0x0100, r29	; 0x800100 <__data_start>
 23e:	e3 cf       	rjmp	.-58     	; 0x206 <main+0x18>

00000240 <__udivmodsi4>:
 240:	a1 e2       	ldi	r26, 0x21	; 33
 242:	1a 2e       	mov	r1, r26
 244:	aa 1b       	sub	r26, r26
 246:	bb 1b       	sub	r27, r27
 248:	fd 01       	movw	r30, r26
 24a:	0d c0       	rjmp	.+26     	; 0x266 <__udivmodsi4_ep>

0000024c <__udivmodsi4_loop>:
 24c:	aa 1f       	adc	r26, r26
 24e:	bb 1f       	adc	r27, r27
 250:	ee 1f       	adc	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	a2 17       	cp	r26, r18
 256:	b3 07       	cpc	r27, r19
 258:	e4 07       	cpc	r30, r20
 25a:	f5 07       	cpc	r31, r21
 25c:	20 f0       	brcs	.+8      	; 0x266 <__udivmodsi4_ep>
 25e:	a2 1b       	sub	r26, r18
 260:	b3 0b       	sbc	r27, r19
 262:	e4 0b       	sbc	r30, r20
 264:	f5 0b       	sbc	r31, r21

00000266 <__udivmodsi4_ep>:
 266:	66 1f       	adc	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	88 1f       	adc	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	1a 94       	dec	r1
 270:	69 f7       	brne	.-38     	; 0x24c <__udivmodsi4_loop>
 272:	60 95       	com	r22
 274:	70 95       	com	r23
 276:	80 95       	com	r24
 278:	90 95       	com	r25
 27a:	9b 01       	movw	r18, r22
 27c:	ac 01       	movw	r20, r24
 27e:	bd 01       	movw	r22, r26
 280:	cf 01       	movw	r24, r30
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
