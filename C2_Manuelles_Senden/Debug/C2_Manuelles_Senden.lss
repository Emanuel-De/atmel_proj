
C2_Manuelles_Senden.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000132  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080012a  0080012a  000001f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000107  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c4  00000000  00000000  00000397  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000137  00000000  00000000  0000045b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000194  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000007de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 32       	cpi	r26, 0x2B	; 43
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 94 00 	call	0x128	; 0x128 <main>
  9e:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_14>:
// Index des nächsten zu sendenden Bits
int8_t idx = 0;

// Timer Compare Match Interrupt
ISR(TIMER0_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
    if(bits_zum_senden[idx] == 1) PORTD |=  _BV(SERIAL_OUT);
  b6:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
  ba:	0e 2e       	mov	r0, r30
  bc:	00 0c       	add	r0, r0
  be:	ff 0b       	sbc	r31, r31
  c0:	e0 50       	subi	r30, 0x00	; 0
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	80 81       	ld	r24, Z
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	09 f4       	brne	.+2      	; 0xcc <__vector_14+0x26>
  ca:	59 9a       	sbi	0x0b, 1	; 11
    if(bits_zum_senden[idx] == 0) PORTD &= ~_BV(SERIAL_OUT);
  cc:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
  d0:	0e 2e       	mov	r0, r30
  d2:	00 0c       	add	r0, r0
  d4:	ff 0b       	sbc	r31, r31
  d6:	e0 50       	subi	r30, 0x00	; 0
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	80 81       	ld	r24, Z
  dc:	81 11       	cpse	r24, r1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <__vector_14+0x3c>
  e0:	59 98       	cbi	0x0b, 1	; 11
    
    ++idx;
  e2:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__data_end>
  e6:	ef 5f       	subi	r30, 0xFF	; 255
  e8:	e0 93 2a 01 	sts	0x012A, r30	; 0x80012a <__data_end>
    if(bits_zum_senden[idx] == -1) idx = 0;
  ec:	0e 2e       	mov	r0, r30
  ee:	00 0c       	add	r0, r0
  f0:	ff 0b       	sbc	r31, r31
  f2:	e0 50       	subi	r30, 0x00	; 0
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	80 81       	ld	r24, Z
  f8:	8f 3f       	cpi	r24, 0xFF	; 255
  fa:	11 f4       	brne	.+4      	; 0x100 <__vector_14+0x5a>
  fc:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
}
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <init_port_and_timer>:

// PORTD initialisieren, Timer auf 9.6kHz einstellen
void init_port_and_timer(void)
{
    UCSR0B = 0;                // Arduino Nano: USART deaktivieren!!!
 110:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    DDRD   = _BV(SERIAL_OUT);  // TXD-Anschluss als Ausgang aktivieren
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	8a b9       	out	0x0a, r24	; 10

    TCCR0A = _BV(WGM01);       // CTC Modus ("Clear Timer on Compare Match")
 118:	84 bd       	out	0x24, r24	; 36
    TCCR0B = _BV(CS01);        // Prescaler: 8
 11a:	85 bd       	out	0x25, r24	; 37
    OCR0A  = 207;              // Vergleichswert für Timer --> 9.6 kHz
 11c:	9f ec       	ldi	r25, 0xCF	; 207
 11e:	97 bd       	out	0x27, r25	; 39
    
    TIMSK0 = _BV(OCIE0A);      // Compare Interrupt erlauben
 120:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    sei();                     // Interruptsystem aktivieren
 124:	78 94       	sei
 126:	08 95       	ret

00000128 <main>:
}

// Hauptprogramm
int main(void)
{
    init_port_and_timer();
 128:	0e 94 88 00 	call	0x110	; 0x110 <init_port_and_timer>
    while(1) { /* Endlosschleife */ }
 12c:	ff cf       	rjmp	.-2      	; 0x12c <main+0x4>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
