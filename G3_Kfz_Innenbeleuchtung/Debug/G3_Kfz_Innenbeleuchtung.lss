
G3_Kfz_Innenbeleuchtung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002a6  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019f  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028a  00000000  00000000  000006ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000216  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b3  00000000  00000000  00000c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000dd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 94 00 	call	0x128	; 0x128 <main>
  78:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <tastendruck>:
// ---------------------------------------------------------------------------
// Hat der Anwender den Taster betätigt (und wieder losgelassen)...?
// ---------------------------------------------------------------------------
int tastendruck(void)
{
    if((PIND & _BV(TASTER)) != 0) return 0;
  80:	4a 99       	sbic	0x09, 2	; 9
  82:	17 c0       	rjmp	.+46     	; 0xb2 <tastendruck+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	81 ee       	ldi	r24, 0xE1	; 225
  88:	94 e0       	ldi	r25, 0x04	; 4
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <tastendruck+0xa>
  92:	00 c0       	rjmp	.+0      	; 0x94 <tastendruck+0x14>
  94:	00 00       	nop

    // Abwarten, bis der Taster wieder losgelassen wird;
    // kurze Delays dienen zum Entprellen des Tasters...
    _delay_ms(100);
    while((PIND & _BV(TASTER)) == 0) { }
  96:	4a 9b       	sbis	0x09, 2	; 9
  98:	fe cf       	rjmp	.-4      	; 0x96 <tastendruck+0x16>
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	81 ee       	ldi	r24, 0xE1	; 225
  9e:	94 e0       	ldi	r25, 0x04	; 4
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <tastendruck+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <tastendruck+0x2a>
  aa:	00 00       	nop
    _delay_ms(100);
    return 1;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	08 95       	ret
// ---------------------------------------------------------------------------
// Hat der Anwender den Taster betätigt (und wieder losgelassen)...?
// ---------------------------------------------------------------------------
int tastendruck(void)
{
    if((PIND & _BV(TASTER)) != 0) return 0;
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
    // kurze Delays dienen zum Entprellen des Tasters...
    _delay_ms(100);
    while((PIND & _BV(TASTER)) == 0) { }
    _delay_ms(100);
    return 1;
}
  b6:	08 95       	ret

000000b8 <relais_schalten>:
// ---------------------------------------------------------------------------
// Relais ein- (1) oder ausschalten (0)
// ---------------------------------------------------------------------------
void relais_schalten(int ein_aus)
{
    if(ein_aus == 1) PORTB |=  _BV(RELAIS);
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	91 05       	cpc	r25, r1
  bc:	11 f4       	brne	.+4      	; 0xc2 <relais_schalten+0xa>
  be:	2a 9a       	sbi	0x05, 2	; 5
  c0:	08 95       	ret
    if(ein_aus == 0) PORTB &= ~_BV(RELAIS);
  c2:	89 2b       	or	r24, r25
  c4:	09 f4       	brne	.+2      	; 0xc8 <relais_schalten+0x10>
  c6:	2a 98       	cbi	0x05, 2	; 5
  c8:	08 95       	ret

000000ca <init_ports>:
// ---------------------------------------------------------------------------
// Ein- und Ausgänge initialisieren
// ---------------------------------------------------------------------------
void init_ports(void)
{
    DDRB  = _BV(RELAIS);  // Ausgang mit Relais
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	84 b9       	out	0x04, r24	; 4
    PORTD = _BV(TASTER);  // Pullup am Taster
  ce:	8b b9       	out	0x0b, r24	; 11
  d0:	08 95       	ret

000000d2 <init_adc>:
// AD-Wandler initialisieren
// ---------------------------------------------------------------------------
void init_adc(void)
{
    // Referenz für AD-Wandler = VCC = 5V (Datenblatt S. 317)
    ADMUX = _BV(REFS0);
  d2:	80 e4       	ldi	r24, 0x40	; 64
  d4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    
    // AD-Wandler einschalten, Prescaler = 128 (Datenblatt S. 320)
    ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);
  d8:	87 e8       	ldi	r24, 0x87	; 135
  da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  de:	08 95       	ret

000000e0 <read_adc0>:
uint16_t read_adc0(void)
{
    // ADSC-Bit setzen, um Wandlung zu starten, das ADSC-Bit wird nach
    // dem Ende der Wandlung automatisch wieder gelöscht. Der eingelesene
    // 10-Bit-Wert steht anschließend im Register ADC.
    ADCSRA |= _BV(ADSC);
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
    while(ADCSRA & _BV(ADSC)) { }  // Auf das Ende der Wandlung warten
  ea:	80 81       	ld	r24, Z
  ec:	86 fd       	sbrc	r24, 6
  ee:	fd cf       	rjmp	.-6      	; 0xea <read_adc0+0xa>
    return ADC;
  f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  f8:	08 95       	ret

000000fa <read_adc0_mean>:

// ---------------------------------------------------------------------------
// Acht Analogwerte von ADC0 einlesen, Mittelwert berechnen und zurückgeben
// ---------------------------------------------------------------------------
uint16_t read_adc0_mean(void)
{
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	c8 e0       	ldi	r28, 0x08	; 8
    uint8_t i;
    uint16_t sum = 0;
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	10 e0       	ldi	r17, 0x00	; 0
    for(i = 0; i < 8; ++i) sum += read_adc0();
 106:	0e 94 70 00 	call	0xe0	; 0xe0 <read_adc0>
 10a:	08 0f       	add	r16, r24
 10c:	19 1f       	adc	r17, r25
 10e:	c1 50       	subi	r28, 0x01	; 1
 110:	d1 f7       	brne	.-12     	; 0x106 <read_adc0_mean+0xc>
    return sum / 8;
}
 112:	c8 01       	movw	r24, r16
 114:	96 95       	lsr	r25
 116:	87 95       	ror	r24
 118:	96 95       	lsr	r25
 11a:	87 95       	ror	r24
 11c:	96 95       	lsr	r25
 11e:	87 95       	ror	r24
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	08 95       	ret

00000128 <main>:
// ---------------------------------------------------------------------------
// Hauptprogramm
// ---------------------------------------------------------------------------
int main(void)
{
    init_ports();
 128:	0e 94 65 00 	call	0xca	; 0xca <init_ports>
    init_adc();
 12c:	0e 94 69 00 	call	0xd2	; 0xd2 <init_adc>

    uint8_t state = ZUSTAND_AUS;
    uint8_t manuell_ein = 0;
 130:	d0 e0       	ldi	r29, 0x00	; 0
int main(void)
{
    init_ports();
    init_adc();

    uint8_t state = ZUSTAND_AUS;
 132:	c1 e0       	ldi	r28, 0x01	; 1
    {
        switch(state)
        {
        case ZUSTAND_AUS:
            if(manuell_ein == 1 || read_adc0_mean() > SCHWELLE_AUF) { relais_schalten(1); state = ZUSTAND_AN; }
            if(tastendruck() == 1) manuell_ein = 1;
 134:	11 e0       	ldi	r17, 0x01	; 1
    while(1)
    {
        switch(state)
        {
        case ZUSTAND_AUS:
            if(manuell_ein == 1 || read_adc0_mean() > SCHWELLE_AUF) { relais_schalten(1); state = ZUSTAND_AN; }
 136:	02 e0       	ldi	r16, 0x02	; 2
    uint8_t state = ZUSTAND_AUS;
    uint8_t manuell_ein = 0;

    while(1)
    {
        switch(state)
 138:	c1 30       	cpi	r28, 0x01	; 1
 13a:	19 f0       	breq	.+6      	; 0x142 <main+0x1a>
 13c:	c2 30       	cpi	r28, 0x02	; 2
 13e:	99 f0       	breq	.+38     	; 0x166 <main+0x3e>
 140:	fb cf       	rjmp	.-10     	; 0x138 <main+0x10>
        {
        case ZUSTAND_AUS:
            if(manuell_ein == 1 || read_adc0_mean() > SCHWELLE_AUF) { relais_schalten(1); state = ZUSTAND_AN; }
 142:	d1 30       	cpi	r29, 0x01	; 1
 144:	29 f0       	breq	.+10     	; 0x150 <main+0x28>
 146:	0e 94 7d 00 	call	0xfa	; 0xfa <read_adc0_mean>
 14a:	89 35       	cpi	r24, 0x59	; 89
 14c:	92 40       	sbci	r25, 0x02	; 2
 14e:	28 f0       	brcs	.+10     	; 0x15a <main+0x32>
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 5c 00 	call	0xb8	; 0xb8 <relais_schalten>
 158:	c0 2f       	mov	r28, r16
            if(tastendruck() == 1) manuell_ein = 1;
 15a:	0e 94 40 00 	call	0x80	; 0x80 <tastendruck>
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	59 f7       	brne	.-42     	; 0x138 <main+0x10>
 162:	d1 2f       	mov	r29, r17
 164:	e9 cf       	rjmp	.-46     	; 0x138 <main+0x10>
            break;

        case ZUSTAND_AN:
            if(manuell_ein == 0 && read_adc0_mean() < SCHWELLE_ZU) { relais_schalten(0); state = ZUSTAND_AUS; }
 166:	d1 11       	cpse	r29, r1
 168:	0a c0       	rjmp	.+20     	; 0x17e <main+0x56>
 16a:	0e 94 7d 00 	call	0xfa	; 0xfa <read_adc0_mean>
 16e:	80 39       	cpi	r24, 0x90	; 144
 170:	91 40       	sbci	r25, 0x01	; 1
 172:	28 f4       	brcc	.+10     	; 0x17e <main+0x56>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 5c 00 	call	0xb8	; 0xb8 <relais_schalten>
 17c:	c1 2f       	mov	r28, r17
            if(tastendruck() == 1) manuell_ein = 1 - manuell_ein;
 17e:	0e 94 40 00 	call	0x80	; 0x80 <tastendruck>
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	c9 f6       	brne	.-78     	; 0x138 <main+0x10>
 186:	81 2f       	mov	r24, r17
 188:	8d 1b       	sub	r24, r29
 18a:	d8 2f       	mov	r29, r24
 18c:	d5 cf       	rjmp	.-86     	; 0x138 <main+0x10>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
